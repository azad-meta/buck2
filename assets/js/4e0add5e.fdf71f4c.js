"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[989],{18227:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=t(74848),n=t(15680);const i={id:"aquery",title:"Aquery Environment"},a="Aquery Environment",l={id:"users/query/aquery",title:"Aquery Environment",description:"Query Value Types",source:"@site/../docs/users/query/aquery.generated.md",sourceDirName:"users/query",slug:"/users/query/aquery",permalink:"/docs/users/query/aquery",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"aquery",title:"Aquery Environment"},sidebar:"main",previous:{title:"Remote Execution",permalink:"/docs/users/remote_execution"},next:{title:"Cquery Environment",permalink:"/docs/users/query/cquery"}},o={},d=[{value:"Query Value Types",id:"query-value-types",level:2},{value:"Common query functions",id:"common-query-functions",level:2},{value:"allpaths(from: <em>target expression</em>, to: <em>target expression</em>, captured_expr: ?<em>query expression</em>)",id:"allpathsfrom-target-expression-to-target-expression-captured_expr-query-expression",level:3},{value:"somepath(from: <em>target expression</em>, to: <em>target expression</em>, captured_expr: ?<em>query expression</em>)",id:"somepathfrom-target-expression-to-target-expression-captured_expr-query-expression",level:3},{value:"attrfilter(attr: <em>string</em>, value: <em>string</em>, targets: <em>target expression</em>)",id:"attrfilterattr-string-value-string-targets-target-expression",level:3},{value:"nattrfilter(attr: <em>string</em>, value: <em>string</em>, targets: <em>target expression</em>)",id:"nattrfilterattr-string-value-string-targets-target-expression",level:3},{value:"attrregexfilter(attr: <em>string</em>, value: <em>string</em>, targets: <em>target expression</em>)",id:"attrregexfilterattr-string-value-string-targets-target-expression",level:3},{value:"buildfile(targets: <em>target expression</em>)",id:"buildfiletargets-target-expression",level:3},{value:"rbuildfiles(universe: <em>file expression</em>, argset: <em>file expression</em>)",id:"rbuildfilesuniverse-file-expression-argset-file-expression",level:3},{value:"allbuildfiles(universe: <em>target expression</em>)",id:"allbuildfilesuniverse-target-expression",level:3},{value:"deps(targets: <em>target expression</em>, depth: ?<em>integer</em>, captured_expr: ?<em>query expression</em>)",id:"depstargets-target-expression-depth-integer-captured_expr-query-expression",level:3},{value:"filter(regex: <em>string</em>, set: <em>target or file expression</em>)",id:"filterregex-string-set-target-or-file-expression",level:3},{value:"inputs(targets: <em>target expression</em>)",id:"inputstargets-target-expression",level:3},{value:"kind(regex: <em>string</em>, targets: <em>target expression</em>)",id:"kindregex-string-targets-target-expression",level:3},{value:"labels(attr: <em>string</em>, targets: <em>target expression</em>)",id:"labelsattr-string-targets-target-expression",level:3},{value:"owner(files: <em>file expression</em>)",id:"ownerfiles-file-expression",level:3},{value:"targets_in_buildfile(files: <em>file expression</em>)",id:"targets_in_buildfilefiles-file-expression",level:3},{value:"rdeps(universe: <em>target expression</em>, targets: <em>target expression</em>, depth: ?<em>integer</em>, captured_expr: ?<em>query expression</em>)",id:"rdepsuniverse-target-expression-targets-target-expression-depth-integer-captured_expr-query-expression",level:3},{value:"testsof(targets: <em>target expression</em>)",id:"testsoftargets-target-expression",level:3},{value:"first_order_deps()",id:"first_order_deps",level:3},{value:"target_deps()",id:"target_deps",level:3},{value:"exec_deps()",id:"exec_deps",level:3},{value:"configuration_deps()",id:"configuration_deps",level:3},{value:"toolchain_deps()",id:"toolchain_deps",level:3},{value:"intersect(left: <em>any value</em>, right: <em>any value</em>)",id:"intersectleft-any-value-right-any-value",level:3},{value:"except(left: <em>any value</em>, right: <em>any value</em>)",id:"exceptleft-any-value-right-any-value",level:3},{value:"union(left: <em>any value</em>, right: <em>any value</em>)",id:"unionleft-any-value-right-any-value",level:3},{value:"Query functions",id:"query-functions",level:2},{value:"all_outputs(targets: <em>target expression</em>)",id:"all_outputstargets-target-expression",level:3},{value:"all_actions(targets: <em>target expression</em>)",id:"all_actionstargets-target-expression",level:3}];function c(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.useMDXComponents)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"aquery-environment",children:"Aquery Environment"})}),"\n",(0,s.jsx)(r.h2,{id:"query-value-types",children:"Query Value Types"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"string"}),":"]}),"\n",(0,s.jsxs)(r.p,{children:["For example, ",(0,s.jsx)(r.code,{children:"non_quoted_string"})," or ",(0,s.jsx)(r.code,{children:'"quoted string"'}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"integer"}),":"]}),"\n",(0,s.jsxs)(r.p,{children:["Must be positive and fit in ",(0,s.jsx)(r.code,{children:"u32"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"target expression"}),": either a literal or the return value of a function"]}),"\n",(0,s.jsxs)(r.p,{children:["This could be a literal build target (",(0,s.jsx)(r.code,{children:'"cell//some:target"'}),") or a pattern (",(0,s.jsx)(r.code,{children:'"cell//package:"'})," or ",(0,s.jsx)(r.code,{children:'"cell//recursive/..."'}),") or the result of another function that returns a target expression. For queries in CLI commands (like ",(0,s.jsx)(r.code,{children:"buck2 query"}),"), literals can be relative to the current working dir (like ",(0,s.jsx)(r.code,{children:"some:target"})," or ",(0,s.jsx)(r.code,{children:"..."}),")."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"file expression"}),": either a literal or the return value of a function"]}),"\n",(0,s.jsxs)(r.p,{children:["This could be a file literal like ",(0,s.jsx)(r.code,{children:"path/to/a.file"})," or the return value of a function that returns files (for example, the ",(0,s.jsx)(r.code,{children:"buildfile()"})," function)."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"target or file expression"}),":"]}),"\n",(0,s.jsxs)(r.p,{children:["Either a ",(0,s.jsx)(r.em,{children:"file expression"})," or ",(0,s.jsx)(r.em,{children:"target expression"}),". This could be a literal like ",(0,s.jsx)(r.code,{children:"path/to/a.file"})," or ",(0,s.jsx)(r.code,{children:'"cell//some:target"'}),",\nor the return value of a function that returns files or targets."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"query expression"}),": a valid query expression, evaluated in a function-specific context"]}),"\n",(0,s.jsxs)(r.p,{children:["This is used for functions that capture an expression and evaluate it in another context. For example, the ",(0,s.jsx)(r.code,{children:"deps()"})," function can accept an expression that it uses to find the children of a node to customize the deps traversal."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"any value"}),":"]}),"\n",(0,s.jsx)(r.p,{children:"Any query value."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"common-query-functions",children:"Common query functions"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["allpaths(from: ",(0,s.jsx)(r.em,{children:"target expression"}),", to: ",(0,s.jsx)(r.em,{children:"target expression"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),"): Computes all dependency paths."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["somepath(from: ",(0,s.jsx)(r.em,{children:"target expression"}),", to: ",(0,s.jsx)(r.em,{children:"target expression"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["attrfilter(attr: ",(0,s.jsx)(r.em,{children:"string"}),", value: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),"): The ",(0,s.jsx)(r.code,{children:"attrfilter(attribute, value, targets)"})," operator evaluates the given target expression and filters the resulting build targets to those where the specified attribute contains the specified value."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["nattrfilter(attr: ",(0,s.jsx)(r.em,{children:"string"}),", value: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["attrregexfilter(attr: ",(0,s.jsx)(r.em,{children:"string"}),", value: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["buildfile(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["rbuildfiles(universe: ",(0,s.jsx)(r.em,{children:"file expression"}),", argset: ",(0,s.jsx)(r.em,{children:"file expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["allbuildfiles(universe: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["deps(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),", depth: ?",(0,s.jsx)(r.em,{children:"integer"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["filter(regex: ",(0,s.jsx)(r.em,{children:"string"}),", set: ",(0,s.jsx)(r.em,{children:"target or file expression"}),"): Filter using regex partial match."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["inputs(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["kind(regex: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),"): The ",(0,s.jsx)(r.code,{children:"kind(regex, targets)"})," operator evaluates the specified target expression, ",(0,s.jsx)(r.code,{children:"targets"}),", and returns the targets where the rule type matches the specified ",(0,s.jsx)(r.code,{children:"regex"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["labels(attr: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),"): This function is not implemented, and won't be, because buck2 query core does not support"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["owner(files: ",(0,s.jsx)(r.em,{children:"file expression"}),"): The ",(0,s.jsx)(r.code,{children:"owner(inputfile)"})," operator returns the targets that own the specified inputfile."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["targets_in_buildfile(files: ",(0,s.jsx)(r.em,{children:"file expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["rdeps(universe: ",(0,s.jsx)(r.em,{children:"target expression"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),", depth: ?",(0,s.jsx)(r.em,{children:"integer"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["testsof(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["first_order_deps(): A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["target_deps(): A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["exec_deps(): A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["configuration_deps(): A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["toolchain_deps(): A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["intersect(left: ",(0,s.jsx)(r.em,{children:"any value"}),", right: ",(0,s.jsx)(r.em,{children:"any value"}),"): Computes the set intersection over the given arguments."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["except(left: ",(0,s.jsx)(r.em,{children:"any value"}),", right: ",(0,s.jsx)(r.em,{children:"any value"}),"): Computes the arguments that are in argument A but not in argument B."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["union(left: ",(0,s.jsx)(r.em,{children:"any value"}),", right: ",(0,s.jsx)(r.em,{children:"any value"}),"): Computes the set union over the given arguments."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"allpathsfrom-target-expression-to-target-expression-captured_expr-query-expression",children:["allpaths(from: ",(0,s.jsx)(r.em,{children:"target expression"}),", to: ",(0,s.jsx)(r.em,{children:"target expression"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"Computes all dependency paths."}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"allpaths(from, to)"})," function evaluates to the graph formed by paths between the target expressions from and to, following the dependencies between nodes. For example, the value of\n",(0,s.jsx)(r.code,{children:"buck query \"allpaths('//foo:bar', '//foo/bar/lib:baz')\""}),"\nis the dependency graph rooted at the single target node ",(0,s.jsx)(r.code,{children:"//foo:bar"}),", that includes all target nodes that depend (transitively) on ",(0,s.jsx)(r.code,{children:"//foo/bar/lib:baz"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["The two arguments to ",(0,s.jsx)(r.code,{children:"allpaths()"})," can themselves be expressions. For example, the command:\n",(0,s.jsx)(r.code,{children:"buck query \"allpaths(kind(java_library, '//...'), '//foo:bar')\""}),"\nshows all the paths between any java_library in the repository and the target ",(0,s.jsx)(r.code,{children:"//foo:bar"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["We recommend using ",(0,s.jsx)(r.code,{children:"allpaths()"})," with the ",(0,s.jsx)(r.code,{children:"--output-format=dot"})," parameter to generate a graphviz file that can then be rendered as an image. For example:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ignore",children:"$ buck query \"allpaths('//foo:bar', '//foo/bar/lib:baz')\" --output-format=dot --output-file=result.dot\n$ dot -Tpng result.dot -o image.png\n"})}),"\n",(0,s.jsx)(r.p,{children:"Graphviz is an open-source graph-visualization software tool. Graphviz uses the dot language to describe graphs."}),"\n",(0,s.jsxs)(r.h3,{id:"somepathfrom-target-expression-to-target-expression-captured_expr-query-expression",children:["somepath(from: ",(0,s.jsx)(r.em,{children:"target expression"}),", to: ",(0,s.jsx)(r.em,{children:"target expression"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"attrfilterattr-string-value-string-targets-target-expression",children:["attrfilter(attr: ",(0,s.jsx)(r.em,{children:"string"}),", value: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"attrfilter(attribute, value, targets)"})," operator evaluates the given target expression and filters the resulting build targets to those where the specified attribute contains the specified value."]}),"\n",(0,s.jsx)(r.p,{children:"In this context, the term attribute refers to an argument in a build rule, such as name, headers, srcs, or deps."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["If the attribute is a single value, say ",(0,s.jsx)(r.code,{children:"name"}),", it is compared to the specified value, and the target is returned if they match."]}),"\n",(0,s.jsx)(r.li,{children:"If the attribute is a list, the target is returned if that list contains the specified value."}),"\n",(0,s.jsx)(r.li,{children:"If the attribute is a dictionary, the target is returned if the value exists in either the keys or the values of the dictionary."}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["For example:\n",(0,s.jsx)(r.code,{children:"buck2 query \"attrfilter(deps, '//foo:bar', '//...')\""})," returns the build targets in the repository that depend on ",(0,s.jsx)(r.code,{children:"//foo:bar"}),", or more precisely: those build targets that include ",(0,s.jsx)(r.code,{children:"//foo:bar"})," in their deps argument list."]}),"\n",(0,s.jsxs)(r.h3,{id:"nattrfilterattr-string-value-string-targets-target-expression",children:["nattrfilter(attr: ",(0,s.jsx)(r.em,{children:"string"}),", value: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"attrregexfilterattr-string-value-string-targets-target-expression",children:["attrregexfilter(attr: ",(0,s.jsx)(r.em,{children:"string"}),", value: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"buildfiletargets-target-expression",children:["buildfile(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"rbuildfilesuniverse-file-expression-argset-file-expression",children:["rbuildfiles(universe: ",(0,s.jsx)(r.em,{children:"file expression"}),", argset: ",(0,s.jsx)(r.em,{children:"file expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"allbuildfilesuniverse-target-expression",children:["allbuildfiles(universe: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"depstargets-target-expression-depth-integer-captured_expr-query-expression",children:["deps(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),", depth: ?",(0,s.jsx)(r.em,{children:"integer"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"filterregex-string-set-target-or-file-expression",children:["filter(regex: ",(0,s.jsx)(r.em,{children:"string"}),", set: ",(0,s.jsx)(r.em,{children:"target or file expression"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"Filter using regex partial match."}),"\n",(0,s.jsxs)(r.p,{children:["Target are matched against their fully qualified name.\nFiles are matched against their repo path like ",(0,s.jsx)(r.code,{children:"repo//foo/bar/baz.py"}),"."]}),"\n",(0,s.jsxs)(r.h3,{id:"inputstargets-target-expression",children:["inputs(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"kindregex-string-targets-target-expression",children:["kind(regex: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"kind(regex, targets)"})," operator evaluates the specified target expression, ",(0,s.jsx)(r.code,{children:"targets"}),", and returns the targets where the rule type matches the specified ",(0,s.jsx)(r.code,{children:"regex"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["The specified pattern can be a regular expression. For example,\n",(0,s.jsx)(r.code,{children:"buck2 query \"kind('java.*', deps('//foo:bar'))\""})," returns the targets that match the rule type ",(0,s.jsx)(r.code,{children:"java.*"})," (",(0,s.jsx)(r.code,{children:"java_library"}),", ",(0,s.jsx)(r.code,{children:"java_binary"}),", etc.) in the transitive dependencies of ",(0,s.jsx)(r.code,{children:"//foo:bar"}),"."]}),"\n",(0,s.jsxs)(r.h3,{id:"labelsattr-string-targets-target-expression",children:["labels(attr: ",(0,s.jsx)(r.em,{children:"string"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"This function is not implemented, and won't be, because buck2 query core does not support"}),"\n",(0,s.jsx)(r.p,{children:"returning both files and targets from a single function."}),"\n",(0,s.jsx)(r.p,{children:"In buck1 it returns targets and files referenced by the given attribute\nin the given targets."}),"\n",(0,s.jsxs)(r.p,{children:["Some discussion in"," ",(0,s.jsx)(r.a,{href:"https://internalfb.com/T126638795",children:"T126638795"}),"."]}),"\n",(0,s.jsxs)(r.h3,{id:"ownerfiles-file-expression",children:["owner(files: ",(0,s.jsx)(r.em,{children:"file expression"}),")"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"owner(inputfile)"})," operator returns the targets that own the specified inputfile."]}),"\n",(0,s.jsxs)(r.p,{children:["In this context, own means that the target has the specified file as an input. You could consider the ",(0,s.jsx)(r.code,{children:"owner()"})," and ",(0,s.jsx)(r.code,{children:"inputs()"})," operators to be inverses of each other."]}),"\n",(0,s.jsxs)(r.p,{children:["Example: ",(0,s.jsx)(r.code,{children:"buck2 query \"owner('examples/1.txt')\""})," returns the targets that owns the file ",(0,s.jsx)(r.code,{children:"examples/1.txt"}),", which could be a value such as ",(0,s.jsx)(r.code,{children:"//examples:one"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"It is possible for the specified file to have multiple owners, in which case, owner() returns a set of targets."}),"\n",(0,s.jsxs)(r.p,{children:["If no owner for the file is found, owner() outputs the message: ",(0,s.jsx)(r.code,{children:"No owner was found for <file>"})]}),"\n",(0,s.jsxs)(r.h3,{id:"targets_in_buildfilefiles-file-expression",children:["targets_in_buildfile(files: ",(0,s.jsx)(r.em,{children:"file expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"rdepsuniverse-target-expression-targets-target-expression-depth-integer-captured_expr-query-expression",children:["rdeps(universe: ",(0,s.jsx)(r.em,{children:"target expression"}),", targets: ",(0,s.jsx)(r.em,{children:"target expression"}),", depth: ?",(0,s.jsx)(r.em,{children:"integer"}),", captured_expr: ?",(0,s.jsx)(r.em,{children:"query expression"}),")"]}),"\n",(0,s.jsxs)(r.h3,{id:"testsoftargets-target-expression",children:["testsof(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsx)(r.h3,{id:"first_order_deps",children:"first_order_deps()"}),"\n",(0,s.jsxs)(r.p,{children:["A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n",(0,s.jsxs)(r.p,{children:["Returns the output of deps function for the immediate dependencies of the given targets. Output is equivalent to ",(0,s.jsx)(r.code,{children:"deps(<targets>, 1)"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n",(0,s.jsx)(r.code,{children:"buck2 cquery \"deps('//foo:bar', 1, first_order_deps())\"`` is equivalent to "}),"buck2 cquery \"deps('//foo",":bar","', 1)\"`"]}),"\n",(0,s.jsx)(r.h3,{id:"target_deps",children:"target_deps()"}),"\n",(0,s.jsxs)(r.p,{children:["A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n",(0,s.jsx)(r.p,{children:"Returns the target dependencies of each dependency of the given targets, excluding any configuration, toolchain and execution dependencies (build time dependencies)\nlike compiler used as a part of the build."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n`buck2 cquery \"deps('//foo",":bar","', 1, target_deps())\"``"]}),"\n",(0,s.jsx)(r.h3,{id:"exec_deps",children:"exec_deps()"}),"\n",(0,s.jsxs)(r.p,{children:["A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n",(0,s.jsx)(r.p,{children:"Returns the output of deps function for execution dependencies (build time dependencies), ex. compiler used as a part of the build."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n`buck2 cquery \"deps('//foo",":bar","', 1, exec_deps())\"``"]}),"\n",(0,s.jsx)(r.h3,{id:"configuration_deps",children:"configuration_deps()"}),"\n",(0,s.jsxs)(r.p,{children:["A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n",(0,s.jsx)(r.p,{children:"Returns the output of deps function for configuration dependencies (that appear as conditions in selects)."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n`buck2 cquery \"deps('//foo",":bar","', 1, configuration_deps())\"``"]}),"\n",(0,s.jsx)(r.h3,{id:"toolchain_deps",children:"toolchain_deps()"}),"\n",(0,s.jsxs)(r.p,{children:["A filter function that can be used in the query expression of ",(0,s.jsx)(r.code,{children:"deps"})," query function."]}),"\n",(0,s.jsx)(r.p,{children:"Returns the output of deps function for toolchain dependencies."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n`buck2 cquery \"deps('//foo",":bar","', 1, toolchain_deps())\"``"]}),"\n",(0,s.jsxs)(r.h3,{id:"intersectleft-any-value-right-any-value",children:["intersect(left: ",(0,s.jsx)(r.em,{children:"any value"}),", right: ",(0,s.jsx)(r.em,{children:"any value"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"Computes the set intersection over the given arguments."}),"\n",(0,s.jsxs)(r.p,{children:["Can be used with the ",(0,s.jsx)(r.code,{children:"^"})," symbol. This operator is commutative."]}),"\n",(0,s.jsx)(r.p,{children:"The parser treats this operator as left-associative and of equal precedence, so we recommend\nthat you use parentheses if you need to ensure a specific order of evaluation. A parenthesized expression\nresolves to the value of the expression it encloses."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n",(0,s.jsx)(r.code,{children:"buck2 aquery \"deps('//foo:bar') intersect deps('//baz:lib')\""})," is the same as\n",(0,s.jsx)(r.code,{children:"buck2 aquery \"deps('//foo:bar') ^ deps('//baz:lib')\""}),"\nBoth return the targets that appear in the transitive closure of ",(0,s.jsx)(r.code,{children:"//foo:bar"})," and ",(0,s.jsx)(r.code,{children:"//baz:lib"}),"."]}),"\n",(0,s.jsxs)(r.h3,{id:"exceptleft-any-value-right-any-value",children:["except(left: ",(0,s.jsx)(r.em,{children:"any value"}),", right: ",(0,s.jsx)(r.em,{children:"any value"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"Computes the arguments that are in argument A but not in argument B."}),"\n",(0,s.jsxs)(r.p,{children:["Can be used with the ",(0,s.jsx)(r.code,{children:"-"})," symbol. This operator is NOT commutative."]}),"\n",(0,s.jsx)(r.p,{children:"The parser treats this operator as left-associative and of equal precedence, so we recommend\nthat you use parentheses if you need to ensure a specific order of evaluation. A parenthesized expression\nresolves to the value of the expression it encloses."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n",(0,s.jsx)(r.code,{children:"buck2 aquery \"deps('//foo:bar') except deps('//baz:lib')\""})," is the same as\n",(0,s.jsx)(r.code,{children:"buck2 aquery \"deps('//foo:bar') - deps('//baz:lib')\""}),"\nBoth return the targets that ",(0,s.jsx)(r.code,{children:"//foo:bar"})," depends on and that ",(0,s.jsx)(r.code,{children:"//baz:lib"})," does NOT depend on."]}),"\n",(0,s.jsxs)(r.h3,{id:"unionleft-any-value-right-any-value",children:["union(left: ",(0,s.jsx)(r.em,{children:"any value"}),", right: ",(0,s.jsx)(r.em,{children:"any value"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"Computes the set union over the given arguments."}),"\n",(0,s.jsxs)(r.p,{children:["Can be used with the ",(0,s.jsx)(r.code,{children:"+"})," symbol. This operator is commutative."]}),"\n",(0,s.jsx)(r.p,{children:"The parser treats all this operator as left-associative and of equal precedence, so we recommend\nthat you use parentheses if you need to ensure a specific order of evaluation. A parenthesized expression\nresolves to the value of the expression it encloses."}),"\n",(0,s.jsxs)(r.p,{children:["Example:\n",(0,s.jsx)(r.code,{children:"buck2 aquery \"deps('//foo:bar') union deps('//baz:lib')\""})," is the same as\n",(0,s.jsx)(r.code,{children:"buck2 aquery \"deps('//foo:bar') + deps('//baz:lib')\""}),"\nBoth return the aggregation of the targets that ",(0,s.jsx)(r.code,{children:"//foo:bar"})," and ",(0,s.jsx)(r.code,{children:"//baz:lib"})," depend on."]}),"\n",(0,s.jsx)(r.h2,{id:"query-functions",children:"Query functions"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["all_outputs(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),"): Obtain the actions for all the outputs provided by the ",(0,s.jsx)(r.code,{children:"DefaultInfo"})," for the targets passed"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["all_actions(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),"): Obtain all the actions declared within the analysis of a given target."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"all_outputstargets-target-expression",children:["all_outputs(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsxs)(r.p,{children:["Obtain the actions for all the outputs provided by the ",(0,s.jsx)(r.code,{children:"DefaultInfo"})," for the targets passed"]}),"\n",(0,s.jsxs)(r.p,{children:["as input. This includes both the ",(0,s.jsx)(r.code,{children:"default_outputs"})," and ",(0,s.jsx)(r.code,{children:"other_outputs"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"This operation only makes sense on a target literal (it does nothing if passed something\nelse)."}),"\n",(0,s.jsxs)(r.h3,{id:"all_actionstargets-target-expression",children:["all_actions(targets: ",(0,s.jsx)(r.em,{children:"target expression"}),")"]}),"\n",(0,s.jsx)(r.p,{children:"Obtain all the actions declared within the analysis of a given target."}),"\n",(0,s.jsx)(r.p,{children:"This operation only makes sense on a target literal (it is a simple passthrough when passed\nan action)."})]})}function h(e={}){const{wrapper:r}={...(0,n.useMDXComponents)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},15680:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>h,withMDXComponents:()=>c});var s=t(96540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(){return i=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},i.apply(this,arguments)}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,s)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,s,n=function(e,r){if(null==e)return{};var t,s,n={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=s.createContext({}),c=function(e){return function(r){var t=h(r.components);return s.createElement(e,i({},r,{components:t}))}},h=function(e){var r=s.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=h(e.components);return s.createElement(d.Provider,{value:r},e.children)},u="mdxType",x={inlineCode:"code",wrapper:function(e){var r=e.children;return s.createElement(s.Fragment,{},r)}},g=s.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=h(t),p=n,u=c["".concat(a,".").concat(p)]||c[p]||x[p]||i;return t?s.createElement(u,l(l({ref:r},d),{},{components:t})):s.createElement(u,l({ref:r},d))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=g;var l={};for(var o in r)hasOwnProperty.call(r,o)&&(l[o]=r[o]);l.originalType=e,l[u]="string"==typeof e?e:n,a[1]=l;for(var d=2;d<i;d++)a[d]=t[d];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);