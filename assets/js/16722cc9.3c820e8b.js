"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4440],{63794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=t(74848),o=t(15680),r=t(52112);const a={id:"logging",title:"Logging"},i=void 0,l={id:"users/build_observability/logging",title:"Logging",description:"Buck2 produces detailed event logs for each invocation, which follow a schema",source:"@site/../docs/users/build_observability/logging.md",sourceDirName:"users/build_observability",slug:"/users/build_observability/logging",permalink:"/docs/users/build_observability/logging",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"logging",title:"Logging"},sidebar:"main",previous:{title:"Buck2 Consoles",permalink:"/docs/users/build_observability/interactive_console"},next:{title:"Build Report",permalink:"/docs/users/build_observability/build_report"}},c={},d=[{value:"Event log format",id:"event-log-format",level:2},{value:"Invocation header",id:"invocation-header",level:3},{value:"Command result footer",id:"command-result-footer",level:3},{value:"Buck events",id:"buck-events",level:3},{value:"Span starts",id:"span-starts",level:4},{value:"Span ends",id:"span-ends",level:4},{value:"Instant events",id:"instant-events",level:4},{value:"Viewing the event log",id:"viewing-the-event-log",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.useMDXComponents)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Buck2 produces detailed event logs for each invocation, which follow a schema\noutlined in ",(0,s.jsx)(n.code,{children:"app/buck2_data/data.proto"})," in the buck2 parent directory. The event\nlogs that Buck2 produces automatically are always in protobuf zstd-compressed\nformat (see ",(0,s.jsx)(n.a,{href:"#viewing-the-event-log",children:"Viewing the event log"})," for more details)."]}),"\n",(0,s.jsx)(n.h2,{id:"event-log-format",children:"Event log format"}),"\n",(0,s.jsxs)(n.p,{children:["Warning: the schemas are all subject to change, so we do not recommend relying\non the format. For the source of truth, take a look at ",(0,s.jsx)(n.code,{children:"data.proto"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"invocation-header",children:"Invocation header"}),"\n",(0,s.jsxs)(n.p,{children:["The first line of the event log is always the ",(0,s.jsx)(n.code,{children:"Invocation"})," header:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Invocation {\n    # CLI args split into a list of strings\n    command_line_args: List[str],\n    # Expanded CLI args, which expand any argsfiles\n    expanded_command_line_args: List[str],\n    # Absolute path of the current working directory of the Buck2 command\n    working_dir: str,\n    # UUID of the Buck2 command\n    trace_id: str,\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"command-result-footer",children:"Command result footer"}),"\n",(0,s.jsxs)(n.p,{children:["The last line is always the ",(0,s.jsx)(n.code,{children:"CommandResult"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Result {\n    # One of the result types of CommandResult protobuf type in data.proto\n    result: BuildResponse | CqueryResponse | BxlResponse | ...,\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"buck-events",children:"Buck events"}),"\n",(0,s.jsxs)(n.p,{children:["The rest of the event log contain ",(0,s.jsx)(n.code,{children:"BuckEvent"}),"s, which are either\n",(0,s.jsx)(n.code,{children:"SpanStartEvent"}),"s, ",(0,s.jsx)(n.code,{children:"SpanEndEvent"}),"s, or ",(0,s.jsx)(n.code,{children:"InstantEvent"}),"s."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"BuckEvent"})," format is roughly as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Event {\n    # When the event was fired. This is always a 2-item list, where the first\n    # value is millis, second value is micros\n    timestamp: List[u64],\n    # UUID of the Buck2 command, same one as the invocation header\n    trace_id: str,\n    # A trace-unique 64-bit integer identifying this event's span ID,\n    # if this event begins a new span or belongs to one.\n    span_id: u64,\n    # A trace-unique 64-bit identifying the span that this event is logically\n    # parented to.\n    parent_id: u64,\n    # See sections below for more details\n    data: SpanStart | SpanEnd | Instant,\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"span-starts",children:"Span starts"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SpanStartEvent"})," indicates that a span of work starting:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"SpanStart {\n    # One of the data types of SpanStartEvent protobuf type in data.proto\n    data: AnalysisStart | ActionExecutionStart | ...,\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"span-ends",children:"Span ends"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SpanEndEvent"})," indicates that a span of work has finished:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"SpanEnd {\n    # Duration of the span\n    duration_us: u64,\n    # CPU poll times for this span\n    stats: SpanStats,\n    # One of the data types of SpanEndEvent protobuf type in data.proto\n    data: AnalysisEnd | ActionExecutionEnd | ...,\n}\n\n# CPU poll times for this span\nSpanStats {\n  max_poll_time_us: u64,\n  total_poll_time_us: u64,\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"instant-events",children:"Instant events"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"InstantEvent"})," represents a single point in time:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"InstantEvent {\n    # One of the data types of InstantEvent protobuf type in data.proto\n    data: ConsoleMessage | ActionError | ...,\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["One specific instant event type that may be of interest is the ",(0,s.jsx)(n.code,{children:"SnapShot"})," event,\nwhich includes some interesting details like RSS, CPU, I/O, remote execution,\nand DICE metrics."]}),"\n",(0,s.jsx)(n.h2,{id:"viewing-the-event-log",children:"Viewing the event log"}),"\n",(0,s.jsxs)(n.p,{children:["Event logs can be accessed using commands under ",(0,s.jsx)(n.code,{children:"buck2 log show"}),", which outputs\nthe event logs in JSONL format. You can run ",(0,s.jsx)(n.code,{children:"buck2 log show --help"})," to see all\navailable options. Some useful commands:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Show the logs for the most recent Buck2 command:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"buck2 log show\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Show the logs for a specific Buck2 command, given the command's UUID:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"buck2 log show --trace-id <UUID>\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Show the logs for a recent Buck2 command:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"buck2 log show --recent <NUMBER>\n"})}),"\n",(0,s.jsx)(r.FbInternalOnly,{children:(0,s.jsxs)(n.p,{children:["You can also download the logs locally from Buck2 UI. The logs will be\ndownloaded from Manifold in protobuf zstd-compressed format, and you can view\nthem in JSONL format by passing the path into ",(0,s.jsx)(n.code,{children:"buck2 log show"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["The JSON schema is derived from the protobuf types, and the log itself could be\nquite large. ",(0,s.jsx)(n.a,{href:"https://jqlang.github.io/jq/",children:"jq"})," can be useful to find specific\nthings. For example, this jq script shows the max event delay between a snapshot\nevent creation on the daemon side, and when the client receives it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"buck2 log show | jq -s '\n  map(\n    .Event.data.Instant.data.Snapshot.this_event_client_delay_ms\n      | select(. != null)\n  ) | max'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.useMDXComponents)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>h,withMDXComponents:()=>d});var s=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},r.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=s.createContext({}),d=function(e){return function(n){var t=h(n.components);return s.createElement(e,r({},n,{components:t}))}},h=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=h(e.components);return s.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},g=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=h(t),u=o,p=d["".concat(a,".").concat(u)]||d[u]||m[u]||r;return t?s.createElement(p,i(i({ref:n},c),{},{components:t})):s.createElement(p,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=g;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<r;c++)a[c]=t[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);