"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8053],{38788:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var t=r(74848),s=r(15680),o=r(28774);const l={},a="ExternalRunnerTestInfo",i={id:"api/build/ExternalRunnerTestInfo",title:"ExternalRunnerTestInfo",description:"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests.",source:"@site/../docs/api/build/ExternalRunnerTestInfo.md",sourceDirName:"api/build",slug:"/api/build/ExternalRunnerTestInfo",permalink:"/docs/api/build/ExternalRunnerTestInfo",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"DynamicValue",permalink:"/docs/api/build/DynamicValue"},next:{title:"Label",permalink:"/docs/api/build/Label"}},c={},u=[{value:"ExternalRunnerTestInfo.command",id:"externalrunnertestinfocommand",level:2},{value:"ExternalRunnerTestInfo.contacts",id:"externalrunnertestinfocontacts",level:2},{value:"ExternalRunnerTestInfo.default_executor",id:"externalrunnertestinfodefault_executor",level:2},{value:"ExternalRunnerTestInfo.env",id:"externalrunnertestinfoenv",level:2},{value:"ExternalRunnerTestInfo.executor_overrides",id:"externalrunnertestinfoexecutor_overrides",level:2},{value:"ExternalRunnerTestInfo.labels",id:"externalrunnertestinfolabels",level:2},{value:"ExternalRunnerTestInfo.local_resources",id:"externalrunnertestinfolocal_resources",level:2},{value:"ExternalRunnerTestInfo.required_local_resources",id:"externalrunnertestinforequired_local_resources",level:2},{value:"ExternalRunnerTestInfo.run_from_project_root",id:"externalrunnertestinforun_from_project_root",level:2},{value:"ExternalRunnerTestInfo.test_type",id:"externalrunnertestinfotest_type",level:2},{value:"ExternalRunnerTestInfo.use_project_relative_paths",id:"externalrunnertestinfouse_project_relative_paths",level:2},{value:"ExternalRunnerTestInfo.worker",id:"externalrunnertestinfoworker",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",...(0,s.useMDXComponents)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"externalrunnertestinfo",children:"ExternalRunnerTestInfo"})}),"\n",(0,t.jsx)(n.p,{children:"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests."}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfocommand",children:"ExternalRunnerTestInfo.command"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsx)("code",{children:"ExternalRunnerTestInfo.command: list"})}),"\n",(0,t.jsx)(n.p,{children:"A Starlark value representing the command for this test. The external test runner is what gives meaning to this command."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfocontacts",children:"ExternalRunnerTestInfo.contacts"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.contacts: list[",(0,t.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsx)(n.p,{children:"A starlark value representing the contacts for this test. This is largely expected to be an oncall, though it's not validated in any way."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfodefault_executor",children:"ExternalRunnerTestInfo.default_executor"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.default_executor: ",(0,t.jsx)(o.default,{to:"/docs/api/build/CommandExecutorConfig",children:"command_executor_config"})]})}),"\n",(0,t.jsx)(n.p,{children:"Default executor to use to run tests. If none is passed we will default to the execution platform."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfoenv",children:"ExternalRunnerTestInfo.env"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.env: dict[",(0,t.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", typing.Any]"]})}),"\n",(0,t.jsxs)(n.p,{children:["A Starlark value representing the environment for this test. Here again, the external test runner is what will this meaning. This is of type ",(0,t.jsx)(n.code,{children:"dict[str, ArgLike]"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfoexecutor_overrides",children:"ExternalRunnerTestInfo.executor_overrides"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.executor_overrides: dict[",(0,t.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,t.jsx)(o.default,{to:"/docs/api/build/CommandExecutorConfig",children:"command_executor_config"}),"]"]})}),"\n",(0,t.jsx)(n.p,{children:"Executors that Tpx can use to override the default executor."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfolabels",children:"ExternalRunnerTestInfo.labels"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.labels: list[",(0,t.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"]"]})}),"\n",(0,t.jsx)(n.p,{children:"A starlark value representing the labels for this test."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfolocal_resources",children:"ExternalRunnerTestInfo.local_resources"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.local_resources: dict[",(0,t.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", None | ",(0,t.jsx)(o.default,{to:"/docs/api/build/Label",children:"label"}),"]"]})}),"\n",(0,t.jsx)(n.p,{children:"Mapping from a local resource type to a target with a corresponding provider. Required types are passed from test runner. If the value for a corresponding type is omitted it means local resource should be ignored when executing tests even if those are passed as required from test runner."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinforequired_local_resources",children:"ExternalRunnerTestInfo.required_local_resources"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.required_local_resources: list[",(0,t.jsx)(o.default,{to:"/docs/api/build/RequiredTestLocalResource",children:"RequiredTestLocalResource"}),"]"]})}),"\n",(0,t.jsx)(n.p,{children:"List of local resource types which should be set up additionally to those which are passed from test runner. Allows specifying local resources on a per-rule basis."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinforun_from_project_root",children:"ExternalRunnerTestInfo.run_from_project_root"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.run_from_project_root: ",(0,t.jsx)(o.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsx)(n.p,{children:"Whether this test should run from the project root, as opposed to the cell root"}),"\n",(0,t.jsxs)(n.p,{children:["Defaults to ",(0,t.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfotest_type",children:"ExternalRunnerTestInfo.test_type"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.test_type: ",(0,t.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,t.jsx)(n.p,{children:"A Starlark value representing the type of this test."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfouse_project_relative_paths",children:"ExternalRunnerTestInfo.use_project_relative_paths"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsxs)("code",{children:["ExternalRunnerTestInfo.use_project_relative_paths: ",(0,t.jsx)(o.default,{to:"/docs/api/starlark/bool",children:"bool"})]})}),"\n",(0,t.jsx)(n.p,{children:"Whether this test should use relative paths"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"externalrunnertestinfoworker",children:"ExternalRunnerTestInfo.worker"}),"\n",(0,t.jsx)("pre",{class:"language-python",children:(0,t.jsx)("code",{children:"ExternalRunnerTestInfo.worker: WorkerInfo"})}),"\n",(0,t.jsx)(n.p,{children:"Configuration needed to spawn a new worker. This worker will be used to run every single command related to test execution, including listing."})]})}function h(e={}){const{wrapper:n}={...(0,s.useMDXComponents)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},15680:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>c,MDXProvider:()=>h,mdx:()=>j,useMDXComponents:()=>d,withMDXComponents:()=>u});var t=r(96540);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},o.apply(this,arguments)}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=t.createContext({}),u=function(e){return function(n){var r=d(n.components);return t.createElement(e,o({},n,{components:r}))}},d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},h=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},x="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(r),h=s,x=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return r?t.createElement(x,a(a({ref:n},c),{},{components:r})):t.createElement(x,a({ref:n},c))}));function j(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,l=new Array(o);l[0]=f;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a[x]="string"==typeof e?e:s,l[1]=a;for(var c=2;c<o;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);