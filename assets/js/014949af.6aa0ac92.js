"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9999],{27042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(74848),r=t(15680);const s={id:"dep_files",title:"Dep Files"},a=void 0,o={id:"rule_authors/dep_files",title:"Dep Files",description:"Dep files allow commands to declare which subset of their inputs were used when",source:"@site/../docs/rule_authors/dep_files.md",sourceDirName:"rule_authors",slug:"/rule_authors/dep_files",permalink:"/docs/rule_authors/dep_files",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"dep_files",title:"Dep Files"},sidebar:"main",previous:{title:"PACKAGE Files",permalink:"/docs/rule_authors/package_files"},next:{title:"Why BXL",permalink:"/docs/developers/bxl"}},l={},d=[{value:"Use Cases",id:"use-cases",level:2},{value:"Using dep files",id:"using-dep-files",level:2},{value:"Declaring the dep files and associating inputs",id:"declaring-the-dep-files-and-associating-inputs",level:2},{value:"Producing the dep file",id:"producing-the-dep-file",level:2},{value:"Testing dep files",id:"testing-dep-files",level:2},{value:"Extra notes to the implementer",id:"extra-notes-to-the-implementer",level:2},{value:"Limitations",id:"limitations",level:3},{value:"Dep files don&#39;t need to be covering",id:"dep-files-dont-need-to-be-covering",level:3},{value:"Dep files are lazy",id:"dep-files-are-lazy",level:3},{value:"Dep files will traverse symlinks",id:"dep-files-will-traverse-symlinks",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.useMDXComponents)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Dep files allow commands to declare which subset of their inputs were used when\nthe command executed."}),"\n",(0,i.jsx)(n.p,{children:"When a command produces a dep file and is later invalidated due to an inputs\nchange, Buck2 uses the dep file to check whether the inputs that changed were in\nthe set that the command reported as having used. If none of the inputs that\nchanged were in that set, Buck2 omits re-running the command and reuses the\nprevious result."}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsx)(n.p,{children:"Dep files are used to make dependencies finer grained than what exists in the\ntarget graph, but they're not a substitute for avoiding unused dependencies.\nThey're often useful when targets export many outputs (such as C++ headers) that\naren't all used by all their dependents."}),"\n",(0,i.jsx)(n.p,{children:"Dep files are currently used to skip recompilation steps in C++ when an unused\nheader changed. They're also used in Java to skip recompilation when an unused\nclass changed."}),"\n",(0,i.jsx)(n.h2,{id:"using-dep-files",children:"Using dep files"}),"\n",(0,i.jsx)(n.p,{children:"To use dep files, you need to do the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Declare what output is a dep file and associate it with your command."}),"\n",(0,i.jsx)(n.li,{children:"Declare which inputs are covered by the dep file (this can be a subset of your\ninputs)."}),"\n",(0,i.jsx)(n.li,{children:"Have your command produce the dep file in a format Buck2 can use."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You must also enable\n",(0,i.jsx)(n.a,{href:"/docs/users/advanced/deferred_materialization",children:"Deferred Materialization"})," to use\ndep files."]}),"\n",(0,i.jsx)(n.h2,{id:"declaring-the-dep-files-and-associating-inputs",children:"Declaring the dep files and associating inputs"}),"\n",(0,i.jsx)(n.p,{children:"To declare a dep file and associate it with your command, you need to tag your\nartifacts."}),"\n",(0,i.jsx)(n.p,{children:"Specifically, you'll tag the output (the dep file) and the inputs it covers, as\nshown in the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# First, create a tag\n\nheaders_tag = ctx.actions.artifact_tag()\n\n# Then, tag inputs and the dep file itself in your command line.\n# You do this using the `tag_artifacts` method on your tag.\n# This method does not mutate the input, it wraps it, so you use the output.\n# Any command-line-arg-like can be tagged.\n\ntagged_headers = headers_tag.tag_artifacts(headers)\n\ndep_file = ctx.actions.declare_output("deps").as_output()\ntagged_dep_file = headers_tag.tag_artifacts(dep_file)\n\n# Finally, declare your action.\n# Use the tagged artifacts as you would regular command-line-arg-likes.\n# Pass the tag in `dep_files` and give a name (this is used for logging).\n\nctx.actions.run(\n  ["mycc", "-I", tagged_headers, "-MD", "-MF", tagged_dep_file, "-o", ...],\n  dep_files = { "headers": headers_tag }\n)\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"producing-the-dep-file",children:"Producing the dep file"}),"\n",(0,i.jsx)(n.p,{children:"Your command must produce dep files in the format Buck2 expects, which is simply\na list of all the inputs that were used, one per line."}),"\n",(0,i.jsx)(n.p,{children:"The paths must be the paths Buck2 would use for your inputs, which means paths\nrelative to the project root."}),"\n",(0,i.jsx)(n.p,{children:"If this is not the format your tool produces, use a wrapper to take whatever\noutput your command produces and rewrite it in the format Buck2 expects."}),"\n",(0,i.jsx)(n.h2,{id:"testing-dep-files",children:"Testing dep files"}),"\n",(0,i.jsx)(n.p,{children:"When writing a command that produces a dep file, you should test it! At a\nminimum, check that the inputs you expect are tagged properly."}),"\n",(0,i.jsxs)(n.p,{children:["To do so, build your target, then use\n",(0,i.jsx)(n.code,{children:"buck2 audit dep-files TARGET CATEGORY IDENTIFIER"}),", which will show you the set\nof inputs your command used and how they're tagged."]}),"\n",(0,i.jsx)(n.h2,{id:"extra-notes-to-the-implementer",children:"Extra notes to the implementer"}),"\n",(0,i.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.p,{children:["Dep files only work if a previous invocation of the command is known to your\nBuck2 daemon. Dep files are dropped when the daemon restarts or when you run\n",(0,i.jsx)(n.code,{children:"buck2 debug flush-dep-files"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This means that, for example, if you change an unused header, then run a build\non a fresh daemon, Buck2 will still need to execute this command in order to\nidentify that the header was in fact unused. In contrast, if you did the build\n(and got a remote cache hit on the command), then applied your change and\nre-built, Buck2 would use the dep file on the second execution, and you wouldn't\nneed to execute anything."}),"\n",(0,i.jsx)(n.h3,{id:"dep-files-dont-need-to-be-covering",children:"Dep files don't need to be covering"}),"\n",(0,i.jsx)(n.p,{children:"It's OK for the dep file to only cover a subset of the inputs of your action.\nHowever, within that subset, the dep file must declare all the inputs that were\nused."}),"\n",(0,i.jsx)(n.p,{children:"If you fail to report some inputs you used, then your command will not re-run\nwhen they change, and you'll get stale output."}),"\n",(0,i.jsx)(n.h3,{id:"dep-files-are-lazy",children:"Dep files are lazy"}),"\n",(0,i.jsx)(n.p,{children:"Dep files aren't parsed by Buck2 unless the command needs to re-run. If the\ncommand ran on RE, they aren't even downloaded until then. This ensures dep\nfiles don't cause a performance hit unless they are used, at which point they\nstand a chance of giving a performance boost instead."}),"\n",(0,i.jsxs)(n.p,{children:["This means that if you produce an invalid dep file, Buck2 will not report this\nuntil your command runs again, at which point Buck2 will report that the dep\nfile is invalid and refuse to proceed (note: you can unblock yourself using\n",(0,i.jsx)(n.code,{children:"buck2 debug flush-dep-files"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["To flush out issues during development, you can pass ",(0,i.jsx)(n.code,{children:"--eager-dep-files"})," to\nBuck2 to force Buck2 to parse your dep files as they are produced."]}),"\n",(0,i.jsx)(n.h2,{id:"dep-files-will-traverse-symlinks",children:"Dep files will traverse symlinks"}),"\n",(0,i.jsx)(n.p,{children:"If your dep file reports that a symlink was used, Buck2 will track the symlink's\ntarget as covered by this dep file."})]})}function c(e={}){const{wrapper:n}={...(0,r.useMDXComponents)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>h,mdx:()=>g,useMDXComponents:()=>c,withMDXComponents:()=>u});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(){return s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},s.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=i.createContext({}),u=function(e){return function(n){var t=c(n.components);return i.createElement(e,s({},n,{components:t}))}},c=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=c(e.components);return i.createElement(d.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),h=r,p=u["".concat(a,".").concat(h)]||u[h]||f[h]||s;return t?i.createElement(p,o(o({ref:n},d),{},{components:t})):i.createElement(p,o({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:r,a[1]=o;for(var d=2;d<s;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);