"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4766],{47843:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(74848),i=n(15680),r=n(28774);const l={},s="Bxl APIs",o={id:"api/bxl/index",title:"Bxl APIs",description:"ctarget\\_set",source:"@site/../docs/api/bxl/index.md",sourceDirName:"api/bxl",slug:"/api/bxl/",permalink:"/docs/api/bxl/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"regex",permalink:"/docs/api/build/regex"},next:{title:"ActionQueryNode",permalink:"/docs/api/bxl/ActionQueryNode"}},c={},d=[{value:"ctarget_set",id:"ctarget_set",level:2},{value:"dynamic_actions",id:"dynamic_actions",level:2},{value:"fail_no_stacktrace",id:"fail_no_stacktrace",level:2},{value:"file_set",id:"file_set",level:2},{value:"get_path_without_materialization",id:"get_path_without_materialization",level:2},{value:"get_paths_without_materialization",id:"get_paths_without_materialization",level:2},{value:"main",id:"main",level:2},{value:"now",id:"now",level:2},{value:"utarget_set",id:"utarget_set",level:2}];function p(t){const e={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.useMDXComponents)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"bxl-apis",children:"Bxl APIs"})}),"\n",(0,a.jsx)(e.h2,{id:"ctarget_set",children:"ctarget_set"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def ctarget_set(\nnodes: list[",(0,a.jsx)(r.default,{to:"/docs/api/bxl/ConfiguredTargetNode",children:"bxl.ConfiguredTargetNode"}),"] = ...,\n) -> ",(0,a.jsx)(r.default,{to:"/docs/api/bxl/ConfiguredTargetSet",children:"target_set"})]})}),"\n",(0,a.jsx)(e.p,{children:"Creates a target set from a list of configured nodes."}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"def _impl_ctarget_set(ctx):\n    targets = bxl.ctarget_set([cnode_a, cnode_b])\n    ctx.output.print(type(targets))\n    ctx.output.print(len(targets))\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"dynamic_actions",children:"dynamic_actions"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def dynamic_actions(\n",(0,a.jsx)(e.em,{children:',\nimpl: typing.Callable["'}),", actions: ",(0,a.jsx)(r.default,{to:"/docs/api/build/AnalysisActions",children:"actions"}),', **kwargs: typing.Any", list[provider]],\nattrs: dict[',(0,a.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,a.jsx)(r.default,{to:"/docs/api/build/dynattrs/DynamicAttrType",children:"DynamicAttrType"}),"],\n) -> ",(0,a.jsx)(r.default,{to:"/docs/api/build/DynamicActionsCallable",children:"DynamicActionCallable"})]})}),"\n",(0,a.jsxs)(e.p,{children:["Create new bxl dynamic action callable. Returned object will be callable, and the result of calling it can be passed to ",(0,a.jsx)(e.code,{children:"ctx.actions.dynamic_output_new"}),"."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"fail_no_stacktrace",children:"fail_no_stacktrace"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsx)("code",{children:"def fail_no_stacktrace(*args) -> None"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"file_set",children:"file_set"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsx)("code",{children:"def file_set() -> file_set"})}),"\n",(0,a.jsx)(e.p,{children:"Creates an empty file set for configured nodes."}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"def _impl_file_set(ctx):\n    files = file_set()\n    ctx.output.print(type(files))\n    ctx.output.print(len(files))\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"get_path_without_materialization",children:"get_path_without_materialization"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def get_path_without_materialization(\nthis: ",(0,a.jsx)(r.default,{to:"/docs/api/build/Artifact",children:"artifact"}),",\nctx: ",(0,a.jsx)(r.default,{to:"/docs/api/bxl/Context",children:"bxl.Context"}),",\n/,\n*,\nabs: ",(0,a.jsx)(r.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n) -> ",(0,a.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"})]})}),"\n",(0,a.jsx)(e.p,{children:"The output path of an artifact-like (source, build, declared). Takes an optional boolean to print the absolute or relative path. Note that this method returns an artifact path without asking for the artifact to be materialized (i.e. it may not actually exist on the disk yet)."}),"\n",(0,a.jsx)(e.p,{children:"This is a risky function to call because you may accidentally pass this path to further BXL actions\nthat expect the artifact to be materialized. If this happens, the BXL script will error out.\nIf you want the path without materialization for other uses that don\u2019t involve passing them into\nfurther actions, then it\u2019s safe."}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'def _impl_get_path_without_materialization(ctx):\n    owner = ctx.cquery().owner("cell//path/to/file")[0]\n    artifact = owner.get_source("cell//path/to/file", ctx)\n    source_artifact_project_rel_path = get_path_without_materialization(artifact, ctx)\n    ctx.output.print(source_artifact_project_rel_path) # Note this artifact is NOT ensured or materialized\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"get_paths_without_materialization",children:"get_paths_without_materialization"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def get_paths_without_materialization(\ncmd_line: ",(0,a.jsx)(r.default,{to:"/docs/api/build/CellPath",children:"CellPath"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/Artifact",children:"artifact"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/CellRoot",children:"cell_root"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/Label",children:"label"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/OutputArtifact",children:"output_artifact"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/ProjectRoot",children:"project_root"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/ResolvedStringWithMacros",children:"resolved_macro"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"})," | tagged_command_line | ",(0,a.jsx)(r.default,{to:"/docs/api/build/TargetLabel",children:"target_label"})," | ",(0,a.jsx)(r.default,{to:"/docs/api/build/TransitiveSetArgsProjection",children:"transitive_set_args_projection"})," | write_json_cli_args | RunInfo,\nctx: ",(0,a.jsx)(r.default,{to:"/docs/api/bxl/Context",children:"bxl.Context"}),",\n/,\n*,\nabs: ",(0,a.jsx)(r.default,{to:"/docs/api/starlark/bool",children:"bool"})," = False,\n)"]})}),"\n",(0,a.jsxs)(e.p,{children:["The output paths of a ",(0,a.jsx)(e.code,{children:"cmd_args()"})," inputs. The output paths will be returned as a list. Takes an optional boolean to print the absolute or relative path. Note that this method returns an artifact path without asking for the artifact to be materialized, (i.e. it may not actually exist on the disk yet)."]}),"\n",(0,a.jsx)(e.p,{children:"This is a risky function to call because you may accidentally pass this path to further BXL actions\nthat expect the artifact to be materialized. If this happens, the BXL script will error out.\nIf you want the path without materialization for other uses that don\u2019t involve passing them into\nfurther actions, then it\u2019s safe."}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'def _impl_get_paths_without_materialization(ctx):\n    node = ctx.configured_targets("root//bin:the_binary")\n    providers = ctx.analysis(node).providers()\n    path = get_paths_without_materialization(providers[RunInfo], abs=True) # Note this artifact is NOT ensured or materialized\n    ctx.output.print(path)\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"main",children:"main"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def main(\n*,\nimpl: typing.Callable,\ncli_args: dict[",(0,a.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),", ",(0,a.jsx)(r.default,{to:"/docs/api/bxl/CliArgs",children:"bxl.CliArgs"}),"],\ndoc: ",(0,a.jsx)(r.default,{to:"/docs/api/starlark/str",children:"str"}),' = "",\n)']})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"now",children:"now"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsx)("code",{children:"def now() -> instant"})}),"\n",(0,a.jsx)(e.p,{children:"Creates an Instant at the current time."}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"def _impl_elapsed_millis(ctx):\n    instant = now()\n    time_a = instant.elapsed_millis()\n    # do something that takes a long time\n    time_b = instant.elapsed_millis()\n\n    ctx.output.print(time_a)\n    ctx.output.print(time_b)\n"})}),"\n",(0,a.jsx)(e.p,{children:"This function is only accessible through Bxl."}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"utarget_set",children:"utarget_set"}),"\n",(0,a.jsx)("pre",{class:"language-python",children:(0,a.jsxs)("code",{children:["def utarget_set(\nnodes: list[",(0,a.jsx)(r.default,{to:"/docs/api/bxl/UnconfiguredTargetNode",children:"bxl.UnconfiguredTargetNode"}),"] = ...,\n) -> ",(0,a.jsx)(r.default,{to:"/docs/api/bxl/UnconfiguredTargetSet",children:"target_set"})]})}),"\n",(0,a.jsx)(e.p,{children:"Creates a target set from a list of unconfigured nodes."}),"\n",(0,a.jsx)(e.p,{children:"Sample usage:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"def _impl_utarget_set(ctx):\n    targets = bxl.utarget_set([unode_a, unode_b])\n    ctx.output.print(type(targets))\n    ctx.output.print(len(targets))\n"})})]})}function u(t={}){const{wrapper:e}={...(0,i.useMDXComponents)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(p,{...t})}):p(t)}},15680:(t,e,n)=>{n.r(e),n.d(e,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=n(96540);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(){return r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},r.apply(this,arguments)}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=a.createContext({}),d=function(t){return function(e){var n=p(e.components);return a.createElement(t,r({},e,{components:n}))}},p=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=p(t.components);return a.createElement(c.Provider,{value:e},t.children)},h="mdxType",x={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(l,".").concat(u)]||d[u]||x[u]||r;return n?a.createElement(h,s(s({ref:e},c),{},{components:n})):a.createElement(h,s({ref:e},c))}));function g(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,l=new Array(r);l[0]=f;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s[h]="string"==typeof t?t:i,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);