"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6016],{49586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(74848),a=n(15680),l=n(28774);const o={},i="LazyContext",s={id:"api/bxl/LazyContext",title:"LazyContext",description:"LazyContext.analysis",source:"@site/../docs/api/bxl/LazyContext.md",sourceDirName:"api/bxl",slug:"/api/bxl/LazyContext",permalink:"/docs/api/bxl/LazyContext",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Lazy",permalink:"/docs/api/bxl/Lazy"},next:{title:"LazyResolvedAttrs",permalink:"/docs/api/bxl/LazyResolvedAttrs"}},d={},c=[{value:"LazyContext.analysis",id:"lazycontextanalysis",level:2},{value:"LazyContext.configured_target_node",id:"lazycontextconfigured_target_node",level:2},{value:"LazyContext.join",id:"lazycontextjoin",level:2},{value:"LazyContext.join_all",id:"lazycontextjoin_all",level:2},{value:"LazyContext.unconfigured_target_node",id:"lazycontextunconfigured_target_node",level:2}];function x(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"lazycontext",children:"LazyContext"})}),"\n",(0,r.jsx)(t.h2,{id:"lazycontextanalysis",children:"LazyContext.analysis"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def LazyContext.analysis(\nlabel: ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/ConfiguredTargetNode",children:"bxl.ConfiguredTargetNode"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/build/ConfiguredTargetLabel",children:"configured_target_label"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/build/Label",children:"label"}),",\n/,\n) -> ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,r.jsx)(t.p,{children:"Analyze a target lazily. This will return a lazy operation that can be evaluated later. The target should be a ConfiguredTargetLabel, a ConfiguredProvidersLabel, or a ConfiguredTargetNode."}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'def _impl(ctx):\n    target = ctx.configured_targets("cell//path/to:target")\n    analysis_result = ctx.lazy.analysis(target).resolve()\n    (analysis_result, err) = ctx.lazy.analysis(target).try_resolve()\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"lazycontextconfigured_target_node",children:"LazyContext.configured_target_node"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def LazyContext.configured_target_node(\nexpr: ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/ConfiguredTargetNode",children:"bxl.ConfiguredTargetNode"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/UnconfiguredTargetNode",children:"bxl.UnconfiguredTargetNode"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/build/ConfiguredTargetLabel",children:"configured_target_label"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/build/TargetLabel",children:"target_label"}),",\n/,\n*,\ntarget_platform: None | ",(0,r.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/build/TargetLabel",children:"target_label"})," = ...,\nmodifiers: list[",(0,r.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"}),"] = [],\n) -> ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Gets the configured target node for the ",(0,r.jsx)(t.code,{children:"expr"}),". If given a string target pattern, it will resolve to a target set of configured target nodes. it also accepts an optional ",(0,r.jsx)(t.code,{children:"target_platform"})," and an optional modifers list which is used to resolve configurations of any unconfigured target nodes. The ",(0,r.jsx)(t.code,{children:"target_platform"})," is either a string that can be parsed as a target label, or a target label."]}),"\n",(0,r.jsxs)(t.p,{children:["The given ",(0,r.jsx)(t.code,{children:"expr"})," is either:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"a single string that is a target ot a target pattern."}),"\n",(0,r.jsx)(t.li,{children:"a single target node or label, configured or unconfigured"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Note that this function does not accept ",(0,r.jsx)(t.code,{children:"ConfiguredProviderLabel"})," (which is a configured provider label), since this\nis the label of a subtarget. You can get the underlying configured target label on the ",(0,r.jsx)(t.code,{children:"Label"}),"\nusing ",(0,r.jsx)(t.code,{children:"configured_targets()"})," (ex: ",(0,r.jsx)(t.code,{children:"my_label.configured_target()"}),")."]}),"\n",(0,r.jsxs)(t.p,{children:["This returns either a target set of ",(0,r.jsx)(t.code,{children:"ConfiguredTargetNode"}),"s if the given ",(0,r.jsx)(t.code,{children:"expr"})," is a target pattern string,\nelse a single ",(0,r.jsx)(t.code,{children:"ConfiguredTargetNode"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["When the given a target pattern (returns the target set), for the incompatible targets, it will print the warning message of these incompatible targets.\nElse (returns a single ",(0,r.jsx)(t.code,{children:"ConfiguredTargetNode"}),"), it will raise an error if incompatible when resolve. Use ",(0,r.jsx)(t.code,{children:"Lazy.catch()"})," to catch the error."]}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'def _impl(ctx):\n    # returns a single `ConfiguredTargetNode`\n    node = ctx.lazy.configured_target_node("cell//path/to:target").resolve()\n\n    # returns a target set of `ConfiguredTargetNode`s\n    target_set = ctx.lazy.configured_target_node("cell//path/to:").resolve()\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"lazycontextjoin",children:"LazyContext.join"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def LazyContext.join(\nlazy0: ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"}),",\nlazy1: ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"}),",\n/,\n) -> ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,r.jsx)(t.p,{children:"Join two lazy operations into a single operation that can be evaluated."}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"def _impl(ctx):\n    ...\n    joined = ctx.lazy.join(ctx.lazy.analysis(t1), ctx.lazy.analysis(t2))\n    (res1, res2) = joined.resolve()\n    ctx.output.print(res1)\n    ctx.output.print(res2)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"lazycontextjoin_all",children:"LazyContext.join_all"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def LazyContext.join_all(\noperations: list[",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"}),"],\n/,\n) -> ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Join a list of lazy operations into a single operation that can be evaluated. This is useful when you want to evaluate multiple operations in parallel. Using ",(0,r.jsx)(t.code,{children:".try_resolve()"})," can catch errors for the individual operations."]}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"def _impl(ctx):\n    ...\n    joined = ctx.lazy.join_all([ctx.lazy.analysis(t) for t in targets])\n    analysis_results = joined.resolve()\n    ctx.output.print(analysis_results)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"lazycontextunconfigured_target_node",children:"LazyContext.unconfigured_target_node"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def LazyContext.unconfigured_target_node(\nexpr: ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/UnconfiguredTargetNode",children:"bxl.UnconfiguredTargetNode"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/starlark/str",children:"str"})," | ",(0,r.jsx)(l.default,{to:"/docs/api/build/TargetLabel",children:"target_label"}),",\n/,\n) -> ",(0,r.jsx)(l.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Gets the unconfigured target node(s) for the ",(0,r.jsx)(t.code,{children:"expr"})]}),"\n",(0,r.jsxs)(t.p,{children:["The given ",(0,r.jsx)(t.code,{children:"expr"})," is either:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"a single string that is a target ot a target pattern."}),"\n",(0,r.jsx)(t.li,{children:"a single unconfigured target node or label"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["This returns either a target set of ",(0,r.jsx)(t.code,{children:"UnconfiguredTargetNode"}),"s if the given ",(0,r.jsx)(t.code,{children:"expr"})," is a target pattern string,\nelse a single ",(0,r.jsx)(t.code,{children:"UnconfiguredTargetNode"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,a.useMDXComponents)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>x,withMDXComponents:()=>c});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){return function(t){var n=x(t.components);return r.createElement(e,l({},t,{components:n}))}},x=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=x(e.components);return r.createElement(d.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=x(n),u=a,g=c["".concat(o,".").concat(u)]||c[u]||p[u]||l;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[g]="string"==typeof e?e:a,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);