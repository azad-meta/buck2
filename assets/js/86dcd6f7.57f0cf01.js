"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4673],{10890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(74848),s=t(15680),i=t(52112);const a={id:"transitive_sets",title:"Transitive Sets"},o=void 0,l={id:"rule_authors/transitive_sets",title:"Transitive Sets",description:"Transitive sets enable the propagation of data up dependency trees in a manner",source:"@site/../docs/rule_authors/transitive_sets.md",sourceDirName:"rule_authors",slug:"/rule_authors/transitive_sets",permalink:"/docs/rule_authors/transitive_sets",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"transitive_sets",title:"Transitive Sets"},sidebar:"main",previous:{title:"Writing Rules",permalink:"/docs/rule_authors/writing_rules"},next:{title:"Configurations",permalink:"/docs/rule_authors/configurations"}},c={},d=[{value:"Rule API",id:"rule-api",level:2},{value:"Projections: using transitive sets in command lines",id:"projections-using-transitive-sets-in-command-lines",level:2},{value:"Projections: using transitive sets in write_json()",id:"projections-using-transitive-sets-in-write_json",level:2},{value:"Traversals in depth",id:"traversals-in-depth",level:3},{value:"Other APIs",id:"other-apis",level:2},{value:"Transitive set reductions",id:"transitive-set-reductions",level:3},{value:"Transitive set iteration",id:"transitive-set-iteration",level:3},{value:"Ordering",id:"ordering",level:3},{value:"Implementation details",id:"implementation-details",level:2},{value:"Performance",id:"performance",level:3},{value:"Evaluation",id:"evaluation",level:3}];function h(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Transitive sets enable the propagation of data up dependency trees in a manner\nthat is both efficient in Starlark code (low cost of creation, low memory usage)\nand efficient for execution by Buck (edges can be shared instead of having each\naction depend directly on all its inputs)."}),"\n",(0,r.jsx)(n.p,{children:"Examples of where transitive sets are useful include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Propagating transitive link-time dependencies of a library all the way to a\nbinary to build."}),"\n",(0,r.jsx)(n.li,{children:"Propagating transitive compile-time headers."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rule-api",children:"Rule API"}),"\n",(0,r.jsx)(n.p,{children:"First, you need to declare your transitive set type, then you can use it, as\nfollows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",children:'# This is the type\nMySet = transitive_set()\n\n# Those are transitive sets:\nset1 = ctx.actions.tset(MySet, value = "foo")\nset2 = ctx.actions.tset(MySet, value = "bar", children = [set1])\n'})}),"\n",(0,r.jsx)(n.p,{children:"Values are optional, and so are children. This means you can have a set with no\nvalue and sets with no children."}),"\n",(0,r.jsx)(n.h2,{id:"projections-using-transitive-sets-in-command-lines",children:"Projections: using transitive sets in command lines"}),"\n",(0,r.jsx)(n.p,{children:"Sets aren't useful unless you can use their contents!"}),"\n",(0,r.jsx)(n.p,{children:"To use a set in a command line, you use a concept called a 'projection', which\ndefines how to turn individual values found in the set into command line\narguments."}),"\n",(0,r.jsxs)(n.p,{children:["To define a projection, you write a function that takes a value of your set and\nreturns a command-line like object (",(0,r.jsx)(n.code,{children:"cmd_args"}),", ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"attr.arg()"}),"\nattributes, ",(0,r.jsx)(n.code,{children:"artifact"}),", and so on) or a list of them in whichever way makes\nsense for your use case."]}),"\n",(0,r.jsxs)(n.p,{children:["Then, you call ",(0,r.jsx)(n.code,{children:"project_as_args"})," to turn a set into a value suitable for\ninclusion in a command line. When expanded, this projection will expand like a\nlist of all the node's individual projected values."]}),"\n",(0,r.jsx)(n.p,{children:"Following is an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",children:'# Declare the projection\ndef project_as_define(value: str):\n  return cmd_args(value, format = "-D{}")\n\n# Add it to the set definition\nMySet = transitive_set(args_projections = { "define": project_as_define })\n\n# Create a set\nset1 = ctx.actions.tset(MySet, value = "foo")\nset2 = ctx.actions.tset(MySet, value = "bar", children = [set1])\n\n# Call the projection.\n# Note "define" is the key used above in `args_projections`.\nargs = set2.project_as_args("define")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When you use ",(0,r.jsx)(n.code,{children:"args"})," in a command line, it will expand to ",(0,r.jsx)(n.code,{children:"-Dbar -Dfoo"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note that creating projections is very cheap. Notably, it is independent of the\nsize of the set."}),"\n",(0,r.jsx)(n.h2,{id:"projections-using-transitive-sets-in-write_json",children:"Projections: using transitive sets in write_json()"}),"\n",(0,r.jsx)(n.p,{children:"As with command lines, sets can form json projections to be used in write_json."}),"\n",(0,r.jsxs)(n.p,{children:["A json projection is defined in the same way as an arg projection. The function\nshould return a value that ",(0,r.jsx)(n.code,{children:"write_json"})," otherwise supports. Then, you call\n",(0,r.jsx)(n.code,{children:"project_as_json"})," to turn a set into a value that can be passed to ",(0,r.jsx)(n.code,{children:"write_json"}),"\n(or can appear within the value passed to it, it doesn't need to be the\ntop-level value). When expanded, the projection will expand like a list of all\nthe node's individual projected values."]}),"\n",(0,r.jsx)(n.p,{children:"Following is an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",children:'# Declare the projection\ndef project_as_json(value: str):\n  return struct(key = "foo", value = value)\n\n# Add it to the set definition\nMySet = transitive_set(json_projections = { "define": project_as_json })\n\n# Create a set\nset1 = ctx.actions.tset(MySet, value = "foo")\nset2 = ctx.actions.tset(MySet, value = "bar", children = [set1])\n\n# Call the projection.\n# Note "define" is the key we used above in `json_projections`.\nargs = set2.project_as_json("define")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note that if your projected values include (or may include) artifacts, you will\nlikely want to use ",(0,r.jsx)(n.code,{children:"write_json(with_inputs=True)"})," to get back a cmd_args that\nhas all the artifacts in the json structure already in its ",(0,r.jsx)(n.code,{children:".hidden"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"traversals-in-depth",children:"Traversals in depth"}),"\n",(0,r.jsx)(n.p,{children:"Transitive sets form DAGs. Notably, this means individual nodes can exist more\nthan once in a given transitive set."}),"\n",(0,r.jsx)(n.p,{children:"When a transitive set is traversed, nodes that have already been visited are\nskipped. This means their arguments will only be emitted once."}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n","<Mermaid chart={`\nflowchart TD\n  foo((foo))\n  bar((bar))\n  qux((qux))\n  qux --\x3e foo\n  bar --\x3e foo\n  qux --\x3e bar\n`} />","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",children:'set1 = ctx.actions.tset(MySet, value = "foo")\nset2 = ctx.actions.tset(MySet, value = "bar", children = [set1])\nset3 = ctx.actions.tset(MySet, value = "qux", children = [set1, set2])\n\nargs = set3.project_as_args("define")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This will expand to ",(0,r.jsx)(n.code,{children:"-Dqux -Dfoo -Dbar"}),", even though ",(0,r.jsx)(n.code,{children:"set1"})," (",(0,r.jsx)(n.code,{children:'"foo"'}),") shows up\ntwice in the DAG."]}),"\n",(0,r.jsx)(n.h2,{id:"other-apis",children:"Other APIs"}),"\n",(0,r.jsx)(n.h3,{id:"transitive-set-reductions",children:"Transitive set reductions"}),"\n",(0,r.jsx)(n.p,{children:"You can aggregate values of a transitive set via a reduction. This can be\nhelpful for tasks such as propagating Boolean flags up the tree."}),"\n",(0,r.jsx)(n.p,{children:"Following is a real-world example."}),"\n",(0,r.jsxs)(n.p,{children:["When defining a reduction, you receive the reduced values of all your children,\nand an optional value for the current node (the value will be ",(0,r.jsx)(n.code,{children:"None"})," when you\ncreate a set and you don't pass a ",(0,r.jsx)(n.code,{children:"value"}),"), and you need to merge them together\nto produce this node's value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",children:'def link_info_has_default_filelist(children: list[bool], infos: LinkInfos | None):\n    if infos:\n        info = infos.default\n        if info.filelist:\n            return True\n    return any(children)\n\n# Set of LinkInfos\nLinkInfosTSet = transitive_set(\n    reductions = {\n        "has_default_filelist": link_info_has_default_filelist,\n    },\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"transitive-set-iteration",children:"Transitive set iteration"}),"\n",(0,r.jsxs)(n.p,{children:["You ",(0,r.jsx)(n.em,{children:"can"})," iterate over a transitive set. This will yield each value once. You\ncan also iterate over projections."]}),"\n",(0,r.jsxs)(n.p,{children:["However, note that this is generally not recommended, since unlike creating and\nusing a projection, this operation is ",(0,r.jsx)(n.code,{children:"O(set)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You should use this as an escape hatch if and only if you need to implement\nsomething transitive sets don't support via projections or reductions, because\nin doing so you'll lose a lot of the performance benefits."}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",children:'set1 = ctx.actions.tset(MySet, value = "foo")\nset2 = ctx.actions.tset(MySet, value = "bar", children = [set1])\nset3 = ctx.actions.tset(MySet, value = "qux", children = [set1, set2])\n\nvalues = list(set3.traverse())\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This will yield ",(0,r.jsx)(n.code,{children:'["qux", "foo", "bar"]'}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,r.jsx)(n.p,{children:"Transitive set iteration uses a left-to-right, pre-order traversal by default,\nand ignores nodes that have already been visited. This order is reflected in\nprojections as well."}),"\n",(0,r.jsxs)(n.p,{children:["A few different traversal orders are supported with the ",(0,r.jsx)(n.code,{children:"ordering"})," attribute:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Ordering"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"preorder"})," (default)"]}),(0,r.jsx)(n.td,{children:"Traverses using a depth-first-search, visiting nodes left-to-right."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"postorder"})}),(0,r.jsx)(n.td,{children:"Traverses children left-to-right, and then visits the current node."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"topological"})}),(0,r.jsx)(n.td,{children:"A Topological sort, such that nodes are listed after all nodes that have them as descendants. This is similar to a pre-order traversal, except that when nodes are shared with more than one parent it is returned in the order of its last occurrence."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bfs"})}),(0,r.jsx)(n.td,{children:"Breadth-first-search (BFS) traversal, traverses nodes left-to-right before traversing children."})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",metastring:"src=fbcode/buck2/app/buck2_build_api_tests/src/interpreter/transitive_set/tests.rs",children:'set1 = ctx.actions.tset(MySet, value = "foo")\nset2 = ctx.actions.tset(MySet, value = "bar", children = [set1])\nset3 = ctx.actions.tset(MySet, value = "qux", children = [set1, set2])\n\nvalues = list(set3.traverse(ordering = "topological"))\n\n# This also works for projections\nargs = set3.project_as_args("project", ordering = "topological"))\n'})}),"\n",(0,r.jsx)(n.p,{children:"Following is an example of how different orderings evaluate:"}),"\n","<Mermaid chart={`\nflowchart TD\n  foo((foo))\n  bar((bar))\n  qux((qux))\n  qux --\x3e foo\n  bar --\x3e foo\n  qux --\x3e bar\n`} />","\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Ordering"}),(0,r.jsx)(n.th,{children:"Result"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"preorder"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'["qux", "foo", "bar"]'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"postorder"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'["foo", "bar", "qux"]'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"topological"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'["qux", "bar", "foo"]'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bfs"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'["qux", "foo", "bar"]'})})]})]})]}),"\n",(0,r.jsxs)(i.FbInternalOnly,{children:[(0,r.jsx)(n.p,{children:"This is verified by the test:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-starlark",metastring:"src=fbcode/buck2/app/buck2_build_api_tests/src/interpreter/transitive_set/tests.rs title=fbcode/buck2/app/buck2_build_api_tests/src/interpreter/transitive_set/tests.rs",children:'# Test all orderings which show up in the table.\nassert_eq(list(set3.traverse()), ["qux", "foo", "bar"])\nassert_eq(list(set3.traverse(ordering = "preorder")), ["qux", "foo", "bar"])\nassert_eq(list(set3.traverse(ordering = "postorder")), ["foo", "bar", "qux"])\nassert_eq(list(set3.traverse(ordering = "topological")), ["qux", "bar", "foo"])\nassert_eq(list(set3.traverse(ordering = "bfs")), ["qux", "foo", "bar"])\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation details"}),"\n",(0,r.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,r.jsx)(n.p,{children:"The performance benefits of tsets arise due to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Caching"}),": projections and reductions are cached."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lazy Evaluation"}),": projection traversals are evaluated lazily."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"evaluation",children:"Evaluation"}),"\n",(0,r.jsxs)(n.p,{children:["Projections and reductions are evaluated eagerly for each node of your\ntransitive set. This means that if your projection throws an error, you'll find\nout when creating a set via ",(0,r.jsx)(n.code,{children:"ctx.actions.tset"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.useMDXComponents)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>h,withMDXComponents:()=>d});var r=t(96540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),d=function(e){return function(n){var t=h(n.components);return r.createElement(e,i({},n,{components:t}))}},h=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=h(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",j={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},x=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=h(t),u=s,p=d["".concat(a,".").concat(u)]||d[u]||j[u]||i;return t?r.createElement(p,o(o({ref:n},c),{},{components:t})):r.createElement(p,o({ref:n},c))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,a=new Array(i);a[0]=x;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:s,a[1]=o;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}x.displayName="MDXCreateElement"}}]);