"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5999],{98934:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var s=n(74848),o=n(15680);const t={id:"local_resources",title:"Local Resources For Tests Execution"},c=void 0,i={id:"rule_authors/local_resources",title:"Local Resources For Tests Execution",description:"Executing a test might require an external resource which is expensive to",source:"@site/../docs/rule_authors/local_resources.md",sourceDirName:"rule_authors",slug:"/rule_authors/local_resources",permalink:"/docs/rule_authors/local_resources",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"local_resources",title:"Local Resources For Tests Execution"},sidebar:"main",previous:{title:"Alias",permalink:"/docs/rule_authors/alias"},next:{title:"PACKAGE Files",permalink:"/docs/rule_authors/package_files"}},a={},l=[{value:"<code>LocalResourceInfo</code> provider",id:"localresourceinfo-provider",level:2},{value:"Test Execution",id:"test-execution",level:2},{value:"Example Usage",id:"example-usage",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.useMDXComponents)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["Executing a test might require an external resource which is expensive to\ncreate. For example running an iOS UI test requires an iOS simulator and it\ntakes relatively long time to setup it prior to test execution. When tests are\nexecuted remotely resources initialization and allocation could be preemptively\nmanaged by remote execution tier which is not the case for local execution. To\neffectively manage such resources needed for local execution of tests there is a\nseparate Buck2 feature backed by ",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider."]}),"\n",(0,s.jsxs)(r.h2,{id:"localresourceinfo-provider",children:[(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider"]}),"\n",(0,s.jsx)(r.p,{children:"This provider describes how to initialize and clean up a pool of homogeneous\nlocal resources. Management of initialized resources is done by Buck2 itself\nwhen it executes tests requiring such resources."}),"\n",(0,s.jsx)(r.p,{children:"Fields:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"setup"})," \u2014 command represented by ",(0,s.jsx)(r.code,{children:"cmd_args"})," object which is executed to\ninitialize a local resource. Running this command should write a JSON to\nstdout. This JSON represents a pool of local resources which are ready to be\nused."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"resource_env_vars"})," \u2014 key-value mapping ",(0,s.jsx)(r.code,{children:"{str: str}"})," from environment variable\n(appended to an execution command for test which is dependent on this local\nresource) to keys in JSON output of ",(0,s.jsx)(r.code,{children:"setup"})," command."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Example JSON output of ",(0,s.jsx)(r.code,{children:"setup"})," command:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'{\n  "pid": 42,\n  "resources": [\n    {"socket_address": "foo:1"},\n    {"socket_address": "bar:2"}\n  ]\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"JSON keys:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"pid"})," \u2014 an optional attribute which maps to a PID of a process that holds\ninitialized local resources. If present, on non-Windows platforms the process\nwill be sent ",(0,s.jsx)(r.code,{children:"SIGTERM"})," when those resources are no longer needed. Signal\nshould be handled to release any system resources related to local resources."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"resources"})," \u2014 a list of resource instances, each is a mapping from a string\nalias (e.g. ",(0,s.jsx)(r.code,{children:"socket_address"}),") to a value which represents resource. The number\nof concurrently running tests that require resources of the same type is\nlimited by how many instances are in a list. String alias is mapped to an\nenvironment variable key (which will be added to a command requiring such\nresource) using a ",(0,s.jsx)(r.code,{children:"resource_env_vars"})," field in ",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider\n(see ",(0,s.jsx)(r.a,{href:"#example-usage",children:"example"})," below)."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"test-execution",children:"Test Execution"}),"\n",(0,s.jsxs)(r.p,{children:["For a general context on how tests are executed, see\n",(0,s.jsx)(r.a,{href:"/docs/rule_authors/test_execution",children:"Test Execution"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["A decision whether certain local resource is required for specific test is made\nby a test runner. List of required resources is then passed to Buck2 in\n",(0,s.jsx)(r.code,{children:"required_local_resources"})," field of ",(0,s.jsx)(r.code,{children:"ExecuteRequest2"})," test API protobuf message."]}),"\n",(0,s.jsxs)(r.p,{children:["If resource is required for a certain test execution and test could potentially\nbe executed locally, ",(0,s.jsx)(r.code,{children:"local_resources"})," field in test's ",(0,s.jsx)(r.code,{children:"ExternalRunnerTestInfo"}),"\nprovider is used to select appropriate ",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"ExternalRunnerTestInfo.local_resources"})," is a key-value mapping\n",(0,s.jsx)(r.code,{children:'{str: ["label", None]}'}),". Keys represent resource types that match the values\npassed from the test runner, and values are labels that should point to a target\nexposing the ",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider to be used for the initialization of\nthe resource of that type. If the value is ",(0,s.jsx)(r.code,{children:"None"}),", it indicates that a resource\nof that type will not be provided, even if the test runner requests it."]}),"\n",(0,s.jsxs)(r.p,{children:["Before running a test, ",(0,s.jsx)(r.code,{children:"setup"})," command from selected provider is executed and\nits output is used to create a pool of resource instances. This pool is shared\nacross all tests pointing to the same configured target label containing\n",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider (normally that means pool is shared for tests\nrequiring same resource type). A resource is acquired (with potential queuing)\nfrom that pool prior single test is executed and is returned back to the pool\nwhen test finished execution. After ",(0,s.jsx)(r.code,{children:"buck2 test"})," command is finished, cleanup is\nperformed when SIGTERM is sent to each process holding a pool of resources."]}),"\n",(0,s.jsx)(r.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsxs)(r.p,{children:["Define a target which has ",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'simulator(\n  name = "my_resource",\n  broker = ":broker",\n)\n'})}),"\n",(0,s.jsxs)(r.p,{children:["where ",(0,s.jsx)(r.code,{children:"broker"})," points to a runnable handling actual simulators."]}),"\n",(0,s.jsxs)(r.p,{children:["Implementation of ",(0,s.jsx)(r.code,{children:"simulator"})," rule would be:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'def _impl(ctx: AnalysisContext) -> ["provider"]:\n  return [\n    DefaultInfo(),\n    LocalResourceInfo(\n      setup = cmd_args([ctx.attrs.broker[RunInfo]]),\n      resource_env_vars = { "IDB_COMPANION": "socket_address" },\n    )\n  ]\n'})}),"\n",(0,s.jsxs)(r.p,{children:["Running a ",(0,s.jsx)(r.code,{children:":broker"})," via ",(0,s.jsx)(r.code,{children:"setup"})," command produces the following JSON:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'{\n  "pid": 42,\n  "resources": [\n    {"socket_address": "foo:1"},\n    {"socket_address": "bar:2"}\n  ]\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["When Buck2 locally executes a test which requires this particular type of local\nresource, it reserves one resource from the pool (e.g.\n",(0,s.jsx)(r.code,{children:'{"socket_address": "bar:2"}'}),") and add environment variable representing this\nresource to execution command (e.g. ",(0,s.jsx)(r.code,{children:"IDB_COMPANION=bar:2"}),"). In our examples\n",(0,s.jsx)(r.code,{children:'"socket_address"'})," alias was substituted by ",(0,s.jsx)(r.code,{children:'"IDB_COMPANION"'})," based on\n",(0,s.jsx)(r.code,{children:"LocalResourceInfo.resource_env_vars"})," field."]}),"\n",(0,s.jsxs)(r.p,{children:["The last part is to map a resource type to desired ",(0,s.jsx)(r.code,{children:"LocalResourceInfo"}),' provider.\nLet\'s assume a test runner requires a resource of type "ios_simulator" for every\n',(0,s.jsx)(r.code,{children:"apple_test"})," rule."]}),"\n",(0,s.jsxs)(r.p,{children:["Pass ",(0,s.jsx)(r.code,{children:":my_resource"})," target as a dependency into ",(0,s.jsx)(r.code,{children:"apple_test"})," rule:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'apple_test = rule(\n    impl = apple_test_impl,\n    attrs = {\n        ...\n        "_ios_simulator": attrs.default_only(attrs.dep(default = ":my_resource", providers = [LocalResourceInfo])),\n        ...\n    },\n)\n'})}),"\n",(0,s.jsxs)(r.p,{children:['Actually map "ios_simulator" resource type to ',(0,s.jsx)(r.code,{children:":broker"})," target containing\n",(0,s.jsx)(r.code,{children:"LocalResourceInfo"})," provider:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'def apple_test_impl(ctx: AnalysisContext) -> ["provider"]:\n    ...\n    return [\n        ...\n        ExternalRunnerTestInfo(\n            ...\n            local_resources = {\n                "ios_simulator": ctx.attrs._ios_simulator,\n            },\n            ...\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.useMDXComponents)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},15680:(e,r,n)=>{n.r(r),n.d(r,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>m,useMDXComponents:()=>u,withMDXComponents:()=>d});var s=n(96540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function t(){return t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},t.apply(this,arguments)}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,s,o=function(e,r){if(null==e)return{};var n,s,o={},t=Object.keys(e);for(s=0;s<t.length;s++)n=t[s],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(s=0;s<t.length;s++)n=t[s],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),d=function(e){return function(r){var n=u(r.components);return s.createElement(e,t({},r,{components:n}))}},u=function(e){var r=s.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=u(e.components);return s.createElement(l.Provider,{value:r},e.children)},h="mdxType",x={inlineCode:"code",wrapper:function(e){var r=e.children;return s.createElement(s.Fragment,{},r)}},f=s.forwardRef((function(e,r){var n=e.components,o=e.mdxType,t=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,h=d["".concat(c,".").concat(p)]||d[p]||x[p]||t;return n?s.createElement(h,i(i({ref:r},l),{},{components:n})):s.createElement(h,i({ref:r},l))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var t=n.length,c=new Array(t);c[0]=f;var i={};for(var a in r)hasOwnProperty.call(r,a)&&(i[a]=r[a]);i.originalType=e,i[h]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<t;l++)c[l]=n[l];return s.createElement.apply(null,c)}return s.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);