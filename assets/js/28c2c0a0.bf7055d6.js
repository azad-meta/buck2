"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6656],{10267:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=t(74848),i=t(15680),s=t(28774);const l={},d="list",a={id:"api/starlark/list",title:"list",description:"def list(a: typing.Iterable = ..., /) -> list",source:"@site/../docs/api/starlark/list.md",sourceDirName:"api/starlark",slug:"/api/starlark/list",permalink:"/docs/api/starlark/list",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"json",permalink:"/docs/api/starlark/json"},next:{title:"range",permalink:"/docs/api/starlark/range"}},o={},c=[{value:"list.append",id:"listappend",level:2},{value:"list.clear",id:"listclear",level:2},{value:"list.extend",id:"listextend",level:2},{value:"list.index",id:"listindex",level:2},{value:"list.insert",id:"listinsert",level:2},{value:"list.pop",id:"listpop",level:2},{value:"list.remove",id:"listremove",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"list",children:"list"})}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def list(a: typing.Iterable = ..., /) -> list"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list",children:"list"}),": construct a list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"list(x)"})," returns a new list containing the elements of the\niterable sequence x."]}),"\n",(0,r.jsxs)(n.p,{children:["With no argument, ",(0,r.jsx)(n.code,{children:"list()"})," returns a new empty list."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'list()        == []\nlist((1,2,3)) == [1, 2, 3]\nlist("strings are not iterable") # error: not supported\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listappend",children:"list.append"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def list.append(el, /) -> None"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7append",children:"list.append"}),": append an element to a list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.append(x)"})," appends ",(0,r.jsx)(n.code,{children:"x"})," to the list L, and returns ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"append"})," fails if the list is frozen or has active iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x = []\nx.append(1)\nx.append(2)\nx.append(3)\nx == [1, 2, 3]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listclear",children:"list.clear"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def list.clear() -> None"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7clear",children:"list.clear"}),": clear a list"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.clear()"})," removes all the elements of the list L and returns ",(0,r.jsx)(n.code,{children:"None"}),".\nIt fails if the list is frozen or if there are active iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x = [1, 2, 3]\nx.clear()\nx == []\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listextend",children:"list.extend"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def list.extend(other: typing.Iterable, /) -> None"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7extend",children:"list.extend"}),": extend a list with another iterable's content."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.extend(x)"})," appends the elements of ",(0,r.jsx)(n.code,{children:"x"}),", which must be iterable, to\nthe list L, and returns ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"extend"})," fails if ",(0,r.jsx)(n.code,{children:"x"})," is not iterable, or if the list L is frozen or has\nactive iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = []\nx.extend([1, 2, 3])\nx.extend(["foo"])\nx == [1, 2, 3, "foo"]\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listindex",children:"list.index"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def list.index(\nneedle,\nstart: None | ",(0,r.jsx)(s.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\nend: None | ",(0,r.jsx)(s.default,{to:"/docs/api/starlark/int",children:"int"})," = None,\n/,\n) -> ",(0,r.jsx)(s.default,{to:"/docs/api/starlark/int",children:"int"})]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7index",children:"list.index"}),": get the index of an element in the list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.index(x[, start[, end]])"})," finds ",(0,r.jsx)(n.code,{children:"x"})," within the list L and returns its\nindex."]}),"\n",(0,r.jsxs)(n.p,{children:["The optional ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"})," parameters restrict the portion of\nlist L that is inspected.  If provided and not ",(0,r.jsx)(n.code,{children:"None"}),", they must be list\nindices of type ",(0,r.jsx)(n.code,{children:"int"}),". If an index is negative, ",(0,r.jsx)(n.code,{children:"len(L)"})," is effectively\nadded to it, then if the index is outside the range ",(0,r.jsx)(n.code,{children:"[0:len(L)]"}),", the\nnearest value within that range is used; see ",(0,r.jsx)(n.a,{href:"#indexing",children:"Indexing"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"index"})," fails if ",(0,r.jsx)(n.code,{children:"x"})," is not found in L, or if ",(0,r.jsx)(n.code,{children:"start"})," or ",(0,r.jsx)(n.code,{children:"end"}),"\nis not a valid index (",(0,r.jsx)(n.code,{children:"int"})," or ",(0,r.jsx)(n.code,{children:"None"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = ["b", "a", "n", "a", "n", "a"]\nx.index("a") == 1      # bAnana\nx.index("a", 2) == 3   # banAna\nx.index("a", -2) == 5  # bananA\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listinsert",children:"list.insert"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def list.insert(\nindex: ",(0,r.jsx)(s.default,{to:"/docs/api/starlark/int",children:"int"}),",\nel,\n/,\n) -> None"]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7insert",children:"list.insert"}),": insert an element in a list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.insert(i, x)"})," inserts the value ",(0,r.jsx)(n.code,{children:"x"})," in the list L at index ",(0,r.jsx)(n.code,{children:"i"}),",\nmoving higher-numbered elements along by one.  It returns ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["As usual, the index ",(0,r.jsx)(n.code,{children:"i"})," must be an ",(0,r.jsx)(n.code,{children:"int"}),". If its value is negative,\nthe length of the list is added, then its value is clamped to the\nnearest value in the range ",(0,r.jsx)(n.code,{children:"[0:len(L)]"})," to yield the effective index."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"insert"})," fails if the list is frozen or has active iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'x = ["b", "c", "e"]\nx.insert(0, "a")\nx.insert(-1, "d")\nx == ["a", "b", "c", "d", "e"]\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listpop",children:"list.pop"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsxs)("code",{children:["def list.pop(index: ",(0,r.jsx)(s.default,{to:"/docs/api/starlark/int",children:"int"})," = ..., /)"]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7pop",children:"list.pop"}),": removes and returns the last element of a list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.pop([index])"})," removes and returns the last element of the list L, or,\nif the optional index is provided, at that index."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pop"})," fails if the index is negative or not less than the length of\nthe list, of if the list is frozen or has active iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x = [1, 2, 3]\nx.pop() == 3\nx.pop() == 2\nx == [1]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"listremove",children:"list.remove"}),"\n",(0,r.jsx)("pre",{class:"language-python",children:(0,r.jsx)("code",{children:"def list.remove(needle, /) -> None"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#list%C2%B7remove",children:"list.remove"}),": remove a value from a list"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"L.remove(x)"})," removes the first occurrence of the value ",(0,r.jsx)(n.code,{children:"x"})," from the\nlist L, and returns ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"remove"})," fails if the list does not contain ",(0,r.jsx)(n.code,{children:"x"}),", is frozen, or has\nactive iterators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x = [1, 2, 3, 2]\nx.remove(2)\nx == [1, 3, 2]\nx.remove(2)\nx == [1, 3]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A subsequent call to ",(0,r.jsx)(n.code,{children:"x.remove(2)"})," would yield an error because the\nelement won't be found."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x = [1, 2, 3, 2]\nx.remove(2)\nx.remove(2)\nx.remove(2) # error: not found\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.useMDXComponents)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>o,MDXProvider:()=>x,mdx:()=>f,useMDXComponents:()=>h,withMDXComponents:()=>c});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(){return s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},s.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),c=function(e){return function(n){var t=h(n.components);return r.createElement(e,s({},n,{components:t}))}},h=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},x=function(e){var n=h(e.components);return r.createElement(o.Provider,{value:n},e.children)},p="mdxType",j={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,o=a(e,["components","mdxType","originalType","parentName"]),c=h(t),x=i,p=c["".concat(l,".").concat(x)]||c[x]||j[x]||s;return t?r.createElement(p,d(d({ref:n},o),{},{components:t})):r.createElement(p,d({ref:n},o))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,l=new Array(s);l[0]=u;var d={};for(var a in n)hasOwnProperty.call(n,a)&&(d[a]=n[a]);d.originalType=e,d[p]="string"==typeof e?e:i,l[1]=d;for(var o=2;o<s;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);