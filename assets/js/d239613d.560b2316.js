"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8479],{29619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(74848),i=n(15680);const a={id:"build_target",title:"Build Target"},o="Build Target",s={id:"concepts/build_target",title:"Build Target",description:"A build target is a string that identifies a build target in your project.",source:"@site/../docs/concepts/build_target.md",sourceDirName:"concepts",slug:"/concepts/build_target",permalink:"/docs/concepts/build_target",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"build_target",title:"Build Target"},sidebar:"main",previous:{title:"Build File",permalink:"/docs/concepts/build_file"},next:{title:"Target Pattern",permalink:"/docs/concepts/target_pattern"}},l={},c=[{value:"Fully-qualified build targets",id:"fully-qualified-build-targets",level:4},{value:"Relative build targets",id:"relative-build-targets",level:4},{value:"Command-line Pro Tips",id:"command-line-pro-tips",level:2},{value:"See also",id:"see-also",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"build-target",children:"Build Target"})}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.em,{children:"build target"})," is a string that identifies a build target in your project.\nBuild targets are used as arguments to Buck2 commands, such as\n",(0,r.jsx)(t.a,{href:"../../users/commands/build",children:(0,r.jsx)(t.code,{children:"buck2 build"})})," and\n",(0,r.jsx)(t.a,{href:"../../users/commands/run",children:(0,r.jsx)(t.code,{children:"buck2 run"})}),". Build targets are also used as\narguments to ",(0,r.jsx)(t.a,{href:"/docs/concepts/build_rule",children:"build rules"})," to enable one target to reference\nanother. For example, a build rule might use a build target to reference another\ntarget in order to specify that target as a ",(0,r.jsx)(t.em,{children:"dependency"}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"fully-qualified-build-targets",children:"Fully-qualified build targets"}),"\n",(0,r.jsxs)(t.p,{children:["Here is an example of a ",(0,r.jsx)(t.em,{children:"fully-qualified"})," build target:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"//java/com/facebook/share:ui\n"})}),"\n",(0,r.jsx)(t.p,{children:"A fully-qualified build target has three components:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"//"})," prefix indicates that the subsequent path is from the ",(0,r.jsx)(t.em,{children:"root"})," of your\nproject. You can use the ",(0,r.jsx)(t.code,{children:"buck2 root"})," command to identify the root of your\nproject."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"java/com/facebook/share"})," between the ",(0,r.jsx)(t.code,{children:"//"})," prefix and the colon (",(0,r.jsx)(t.code,{children:":"}),")\nindicates that the ",(0,r.jsx)(t.a,{href:"/docs/concepts/build_file",children:"build file"})," (usually named ",(0,r.jsx)(t.code,{children:"BUCK"}),") is\nlocated in the directory ",(0,r.jsx)(t.code,{children:"java/com/facebook/share"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"ui"})," after the colon (",(0,r.jsx)(t.code,{children:":"}),") indicates the name of the build target within\nthe build file. Build target names must be unique within a build file. By\n",(0,r.jsx)(t.em,{children:"name"})," we mean, more formally, the value of the ",(0,r.jsx)(t.code,{children:"name"})," argument to the build\nrule."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Note that the name of the build file itself\u2014usually BUCK\u2014does ",(0,r.jsx)(t.em,{children:"not"})," occur in the\nbuild target. All build files within a given Buck2 project must have the same\nname\u2014defined in the ",(0,r.jsx)(t.code,{children:"[buildfile].name"})," entry of ",(0,r.jsx)(t.code,{children:".buckconfig"}),". Therefore, it is\nunnecessary to include the name in the target. The full regular expression for a\nfully-qualified build target is as follows:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"[A-Za-z0-9._-]*//[A-Za-z0-9/._-]*:[A-Za-z0-9_/.=,@~+-]+\n|- cell name -|  | package path | |--- target name ----|\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In Buck2, a ",(0,r.jsx)(t.em,{children:"cell"})," defines a directory tree of one or more Buck2 packages. For\nmore information about Buck2 cells and their relationship to packages and\nprojects, see the ",(0,r.jsx)(t.a,{href:"/docs/concepts/key_concepts",children:"Key Concepts"})," topic. ",(0,r.jsx)(t.strong,{children:"NOTE:"})," All target\npaths are assumed to start from the root of the Buck2 project. Buck2 does not\nsupport specifying a target path that starts from a directory below the root.\nAlthough the double forward slash (",(0,r.jsx)(t.code,{children:"//"}),") that prefixes target paths can be\nomitted when specifying a target from the command line (see ",(0,r.jsx)(t.strong,{children:"Pro Tips"})," below),\nBuck2 still assumes that the path is from the root. Buck2 does support\n",(0,r.jsx)(t.em,{children:"relative"})," build paths, but in Buck2, that concept refers to specifying build\ntargets ",(0,r.jsx)(t.em,{children:"from within"})," a build file. See ",(0,r.jsx)(t.strong,{children:"Relative build targets"})," below for\nmore details."]}),"\n",(0,r.jsx)(t.h4,{id:"relative-build-targets",children:"Relative build targets"}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.em,{children:"relative"})," build target can be used to reference a build target _within the\nsame _",(0,r.jsx)(t.a,{href:"/docs/concepts/build_file",children:(0,r.jsx)(t.em,{children:"build file"})}),". A relative build target starts with a colon\n(",(0,r.jsx)(t.code,{children:":"}),") and is followed by only the third component (or ",(0,r.jsx)(t.em,{children:"short name"}),") of the\nfully-qualified build target. The following snippet from a build file shows an\nexample of using a relative path."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"## Assume this target is in //java/com/facebook/share/BUCK#\njava_binary(\n  name = 'ui_jar',\n  deps = [\n    ## The following target path\n    ##   //java/com/facebook/share:ui\n    ## is the same as using the following relative path.#\n    ':ui',\n  ],\n)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"command-line-pro-tips",children:"Command-line Pro Tips"}),"\n",(0,r.jsxs)(t.p,{children:["Here are some ways that you can reduce your typing when you specify build\ntargets as command-line arguments to the ",(0,r.jsx)(t.code,{children:"buck2 build"})," or ",(0,r.jsx)(t.code,{children:"buck2 run"})," commands.\nConsider the following example of a fully-qualified build target used with the\n",(0,r.jsx)(t.code,{children:"buck2 build"})," command:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"buck2 build //java/com/facebook/share:share\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Although Buck2 is always strict when parsing build targets in build files, Buck2\nis flexible when parsing build targets on the command-line. Specifically, the\nleading ",(0,r.jsx)(t.code,{children:"//"})," is optional on the command line, so the above could be:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"buck2 build java/com/facebook/share:share\n"})}),"\n",(0,r.jsx)(t.p,{children:"Also, if there is a forward slash before the colon, it is ignored, so this could\nalso be written as:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"buck2 build java/com/facebook/share/:share\n"})}),"\n",(0,r.jsx)(t.p,{children:"which enables you to produce the red text shown below using tab-completion,\nwhich dramatically reduces how much you need to type:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"buck2 build java/com/facebook/share/:share\n"})}),"\n",(0,r.jsx)(t.p,{children:"Finally, if the final path element matches the value specified after the colon,\nit can be omitted:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# This is treated as //java/com/facebook/share:share.\nbuck2 build java/com/facebook/share/\n"})}),"\n",(0,r.jsx)(t.p,{children:"which makes the build target even easier to tab-complete. For this reason, the\nname of the build target for the primary deliverable in a build file is often\nnamed the same as the parent directory. That way, it can be built from the\ncommand-line with less typing."}),"\n",(0,r.jsx)(t.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(t.p,{children:["Buck2 supports the ability to define ",(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.em,{children:"aliases"})," for build targets"]}),"; using\naliases can improve brevity when specifying targets on the Buck2 command line.\nFor more information, see the ",(0,r.jsx)(t.a,{href:"/docs/concepts/buckconfig#alias",children:(0,r.jsx)(t.code,{children:"[alias]"})})," section in the\ndocumentation for ",(0,r.jsx)(t.a,{href:"/docs/concepts/buckconfig",children:(0,r.jsx)(t.code,{children:".buckconfig"})}),". A\n",(0,r.jsx)(t.a,{href:"/docs/concepts/target_pattern",children:(0,r.jsx)(t.strong,{children:"build target pattern"})})," is a string that describes a set\nof one or more build targets. For example, the pattern ",(0,r.jsx)(t.code,{children:"//..."})," is used to build\nan entire project. For more information, see the ",(0,r.jsx)(t.strong,{children:"Build Target Pattern"})," topic."]})]})}function h(e={}){const{wrapper:t}={...(0,i.useMDXComponents)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>b,useMDXComponents:()=>h,withMDXComponents:()=>d});var r=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),d=function(e){return function(t){var n=h(t.components);return r.createElement(e,a({},t,{components:n}))}},h=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=h(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=h(n),u=i,p=d["".concat(o,".").concat(u)]||d[u]||f[u]||a;return n?r.createElement(p,s(s({ref:t},c),{},{components:n})):r.createElement(p,s({ref:t},c))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);