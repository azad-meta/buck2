"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9998],{29085:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(74848),o=t(15680);const a={},s="Bxl support for performing analysis on targets",i={id:"rfcs/bxl-analysis",title:"Bxl support for performing analysis on targets",description:"Intro",source:"@site/../docs/rfcs/bxl-analysis.md",sourceDirName:"rfcs",slug:"/rfcs/bxl-analysis",permalink:"/docs/rfcs/bxl-analysis",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Intro",id:"intro",level:2},{value:"How to implement it?",id:"how-to-implement-it",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.useMDXComponents)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"bxl-support-for-performing-analysis-on-targets",children:"Bxl support for performing analysis on targets"})}),"\n",(0,r.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,r.jsxs)(n.p,{children:["As Bob and I continue to build out ",(0,r.jsx)(n.code,{children:"bxl"})," we want users to be able to inspect the\nproviders and actions for a given target label. In order to support this, we\nneed to be able to provide access to ",(0,r.jsx)(n.code,{children:"AnalysisResult"})," via ",(0,r.jsx)(n.code,{children:"starlark"}),", obtained\nvia a call to ",(0,r.jsx)(n.code,{children:"RuleAnalysisCalculation::get_analysis_result"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"how-to-implement-it",children:"How to implement it?"}),"\n",(0,r.jsx)(n.p,{children:"Our three principle options are as follows:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"BxlContext::analyze(targetlabel: ConfiguredTargetLabelLike)"}),", where\n",(0,r.jsx)(n.code,{children:"ConfiguredTargetLabelLike"})," accepts ",(0,r.jsx)(n.code,{children:"ConfiguredTargetLabel"}),",\n",(0,r.jsx)(n.code,{children:"ConfiguredTargetNode"}),", or sets and lists of these things + acceptable\nstrings."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In this scenario, we attach the analysis method onto the bxl context itself, and\nrequire that users pass in the target label-ish thing when they want to\nconstruct an analysis result. It's a little awkward in some ways because the\nanalysis is more naturally a method on the argument being passed in and the\n",(0,r.jsx)(n.code,{children:"BxlContext"})," is a context that is needed to perform the calculation. On the\nother hand, this allows us to construct a type analogous to ",(0,r.jsx)(n.code,{children:"TargetExpr"})," which\ncan parse from a wide variety of different ",(0,r.jsx)(n.code,{children:"ConfiguredTarget"})," like things\n(strings, nodes, labels, sets, ...). It also is a bit nice from an\nimplementational standpoint since we don't have to pass the context around\neverywhere. This isn't a huge pro though, since we can stick it in the global\neval field."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = bxl.analyze(bxl.cquery.deps("foo"))\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ConfiguredTargetLabel::analyze()"}),", ",(0,r.jsx)(n.code,{children:"ConfiguredTargetNode::analyze()"}),", ...\nwhere we carry around the ",(0,r.jsx)(n.code,{children:"BxlContext"})," in the ",(0,r.jsx)(n.code,{children:"eval"})," global field and\nimplement analysis on each type that is target label like."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The pro of this one is that it's quite natural - you can take a\n",(0,r.jsx)(n.code,{children:"ConfiguredStarlarkTargetLabel"})," and then just ... call ",(0,r.jsx)(n.code,{children:"analyze()"})," on it like\nyou might expect to. The two downsides are that we have to propagate the context\naround behind the scenes, and we'll have to provide an implementation of\n",(0,r.jsx)(n.code,{children:"analyze"})," on everything that we'd like to have be able to be ",(0,r.jsx)(n.code,{children:"analyzable"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = "root//bin:the_binary".analyze()\n# but we don\'t support\n"root//bin:the_binary".rdeps()\n\n\n# instead this looks nice\nnodes = ctx.cquery.deps("foo")\nfor n in nodes:\n  # since we can now do\n  nodes.label\n  nodes.attrs.field\n\n  # similarly access analysis\n  nodes.analysis\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"BxlContext::analysis(): AnalysisContext"})," where ",(0,r.jsx)(n.code,{children:"AnalysisContext"})," exposes\n",(0,r.jsx)(n.code,{children:"AnalysisContext::analyze(targetlabel: ConfiguredTargetLabelLike)"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["There's not really any pros of this approach except that it's similar to the\nflow for ",(0,r.jsx)(n.code,{children:"cquery"})," where we return a ",(0,r.jsx)(n.code,{children:"cqueryctx"})," object to call ",(0,r.jsx)(n.code,{children:"cquery"})," methods\nthrough."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = ctx.analysis().analyze("//lib:file1")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We can also restrict the API to require that users go through ",(0,r.jsx)(n.code,{children:"cquery"})," to obtain\na ",(0,r.jsx)(n.code,{children:"ConfiguredTargetNode"})," prior to calling ",(0,r.jsx)(n.code,{children:"analysis"}),", although we don't ",(0,r.jsx)(n.em,{children:"have\nto"}),". I say that we don't have to because the ",(0,r.jsx)(n.code,{children:"get_analysis_result"})," method\nmentioned above is configured to accept a label anyway."]})]})}function h(e={}){const{wrapper:n}={...(0,o.useMDXComponents)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>h,withMDXComponents:()=>d});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),d=function(e){return function(n){var t=h(n.components);return r.createElement(e,a({},n,{components:t}))}},h=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=h(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},x=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=h(t),p=o,u=d["".concat(s,".").concat(p)]||d[p]||f[p]||a;return t?r.createElement(u,i(i({ref:n},c),{},{components:t})):r.createElement(u,i({ref:n},c))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=x;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}x.displayName="MDXCreateElement"}}]);