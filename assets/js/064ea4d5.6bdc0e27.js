"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9198],{7201:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(74848),i=r(15680);const s={id:"bxl_basics",title:"BXL Basics"},o=void 0,a={id:"developers/bxl_basics",title:"BXL Basics",description:"This page is a primer on common BXL functionalities and data types. Ramping up",source:"@site/../docs/developers/bxl_basics.md",sourceDirName:"developers",slug:"/developers/bxl_basics",permalink:"/docs/developers/bxl_basics",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"bxl_basics",title:"BXL Basics"},sidebar:"main",previous:{title:"Getting Started",permalink:"/docs/developers/bxl_getting_started"},next:{title:"Common How-Tos",permalink:"/docs/developers/bxl_how_tos"}},c={},l=[{value:"Common BXL functionalities",id:"common-bxl-functionalities",level:2},{value:"Build",id:"build",level:3},{value:"Analysis",id:"analysis",level:3},{value:"Query",id:"query",level:3},{value:"Uquery",id:"uquery",level:4},{value:"Cquery",id:"cquery",level:4},{value:"Aquery",id:"aquery",level:4},{value:"Actions",id:"actions",level:3},{value:"Ensure",id:"ensure",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,i.useMDXComponents)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This page is a primer on common BXL functionalities and data types. Ramping up\nin BXL may be challenging without much prior knowledge of Buck2 building blocks\n(ex: targets, configurations, queries), so please take a look at the\n",(0,t.jsx)(n.a,{href:"/docs/concepts/concept_map",children:"Concepts"})," documentation before reading on."]}),"\n",(0,t.jsx)(n.h2,{id:"common-bxl-functionalities",children:"Common BXL functionalities"}),"\n",(0,t.jsx)(n.h3,{id:"build",children:"Build"}),"\n",(0,t.jsxs)(n.p,{children:["You can build targets within BXL with\n",(0,t.jsx)(n.a,{href:"../../api/bxl/Context/#contextbuild",children:(0,t.jsx)(n.code,{children:"ctx.build()"})}),". The result is a\n",(0,t.jsx)(n.a,{href:"../../api/bxl/BuildResult",children:(0,t.jsx)(n.code,{children:"bxl.BuildResult"})}),", which has ",(0,t.jsx)(n.code,{children:"artifacts()"})," and\n",(0,t.jsx)(n.code,{children:"failures()"})," functions that provide iterators to the artifacts or failures,\nrespectively. You can pass in a single target or target pattern to build."]}),"\n",(0,t.jsx)(n.h3,{id:"analysis",children:"Analysis"}),"\n",(0,t.jsxs)(n.p,{children:["You can run analysis on targets within BXL via\n",(0,t.jsx)(n.a,{href:"../../api/bxl/Context/#contextanalysis",children:(0,t.jsx)(n.code,{children:"ctx.analysis()"})}),". Analysis means to\nevaluate the underlying rule implementation for the inputted targets, and\nproduce the providers that the rule defined for the target. A common workflow is\nto inspect the resulting providers, and perhaps ensure parts of these providers\nor run actions using information from the providers (see ",(0,t.jsx)(n.a,{href:"#actions",children:"Actions"}),"\nbelow)."]}),"\n",(0,t.jsx)(n.h3,{id:"query",children:"Query"}),"\n",(0,t.jsxs)(n.p,{children:["Buck2 supports a couple different query types: querying the unconfigured graph\n(",(0,t.jsx)(n.code,{children:"buck2 uquery"}),"), the configured graph (",(0,t.jsx)(n.code,{children:"buck2 cquery"}),"), or the action graph\n(",(0,t.jsx)(n.code,{children:"buck2 aquery"}),"). These queries are all available in BXL as well:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ctx.uquery()"})," returns a ",(0,t.jsx)(n.a,{href:"../../api/bxl/UqueryContext",children:(0,t.jsx)(n.code,{children:"bxl.UqueryContext"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ctx.cquery()"})," returns a ",(0,t.jsx)(n.a,{href:"../../api/bxl/CqueryContext",children:(0,t.jsx)(n.code,{children:"bxl.CqueryContext"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ctx.aquery()"})," returns a ",(0,t.jsx)(n.a,{href:"../../api/bxl/AqueryContext",children:(0,t.jsx)(n.code,{children:"bxl.AqueryContext"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can read more about the individual queries in the API docs. There are many\nqueries that are common between uquery, cquery, and aquery, but cquery and\naquery will have extra queries unique to the configured graph or the action\ngraph. One more thing to call out is the ",(0,t.jsx)(n.code,{children:"eval()"})," query, which is a special\nquery that takes in the entire query as a string literal. A common use for\n",(0,t.jsx)(n.code,{children:"eval()"})," is to migrate a complex query from Buck2 CLI to BXL by dropping the\nentire query string directly into ",(0,t.jsx)(n.code,{children:"eval()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The query results are target sets (iterable container) of\n",(0,t.jsxs)(n.a,{href:"../../api/bxl/UnconfiguredTargetNode",children:[(0,t.jsx)(n.code,{children:"bxl.UnconfiguredTargetNode"}),"s"]})," for\nuquery, ",(0,t.jsxs)(n.a,{href:"../../api/bxl/ConfiguredTargetNode",children:[(0,t.jsx)(n.code,{children:"bxl.ConfiguredTargetNode"}),"s"]})," for\ncquery, and ",(0,t.jsxs)(n.a,{href:"../../api/bxl/ActionQueryNode",children:[(0,t.jsx)(n.code,{children:"bxl.ActionQueryNode"}),"s"]})," for aquery.\nEach of these node types have accessors on their attributes. A common workflow\nis to run some query in BXL, and iterate through the resulting nodes to inspect\ntheir attributes, and use those attributes to inform further computations in\nBXL."]}),"\n",(0,t.jsx)(n.h4,{id:"uquery",children:"Uquery"}),"\n",(0,t.jsx)(n.p,{children:"Querying the unconfigured graph means that no configurations (such as platforms\nand transitions) have been applied to the target graph yet. This means that it's\nvery possible that some parts of the target graph is broken due to lack of\nconfigurations. Generally to avoid this problem, cquery may be preferred\ninstead."}),"\n",(0,t.jsx)(n.h4,{id:"cquery",children:"Cquery"}),"\n",(0,t.jsxs)(n.p,{children:["Querying the configured graph means that configurations have been applied to the\ntarget graph. For cquery, we require that users use a\n",(0,t.jsx)(n.a,{href:"/docs/developers/target_universe",children:"target universe"})," for their query inputs."]}),"\n",(0,t.jsx)(n.h4,{id:"aquery",children:"Aquery"}),"\n",(0,t.jsx)(n.p,{children:"Aquery is a quite different from uquery and cquery. It is used to query the\naction graph, which is constructed after Buck2 runs analysis on the targets and\nproduces the list of providers and actions needed to build the target."}),"\n",(0,t.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,t.jsxs)(n.p,{children:["You can create actions directly within the BXL API. The available action APIs\nare equivalent to the ones found on the\n",(0,t.jsx)(n.a,{href:"../../api/build/AnalysisActions",children:(0,t.jsx)(n.code,{children:"AnalysisActions"})})," type for normal rules, with\nthe caveat that ",(0,t.jsx)(n.a,{href:"/docs/developers/dynamic_output",children:"dynamic actions"})," use the\n",(0,t.jsx)(n.a,{href:"../../api/bxl/Context",children:(0,t.jsx)(n.code,{children:"bxl.Context"})})," (which provides richer functionalities)."]}),"\n",(0,t.jsxs)(n.p,{children:["A common workflow would be to run analysis on a target, and use some interesting\nbits found in the analysis result to construct an augmented\n",(0,t.jsx)(n.a,{href:"../../api/build#cmd_args",children:(0,t.jsx)(n.code,{children:"cmd_args"})})," to run, and then ensure the action's\noutput (see below for ensuring). Also see\n",(0,t.jsx)(n.a,{href:"/docs/developers/bxl_how_tos#running-actions",children:"Running actions"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"ensure",children:"Ensure"}),"\n",(0,t.jsxs)(n.p,{children:["Ensuring an artifact means that you want the artifact to be materialized\n(meaning, downloaded to your machine) at the end of the BXL execution. There are\ntwo APIs for ensuring: ",(0,t.jsx)(n.code,{children:"ctx.output.ensure()"})," and ",(0,t.jsx)(n.code,{children:"ctx.output.ensure_multiple()"}),"\n(see ",(0,t.jsx)(n.a,{href:"../../api/bxl/OutputStream",children:(0,t.jsx)(n.code,{children:"bxl.OutputStream"})}),"). As the naming indicates,\nthe former is for ensuring a single artifact, and the latter is for ensuring\nmultiple artifact-like inputs. Artifact-like inputs include\n",(0,t.jsx)(n.a,{href:"../../api/build#cmd_args",children:(0,t.jsx)(n.code,{children:"cmd_args"})})," (can be found when inspecting providers),\n",(0,t.jsx)(n.a,{href:"../../api/bxl/BuildResult",children:(0,t.jsx)(n.code,{children:"bxl.BuildResult"})})," (produced when building something\nin BXL), or ",(0,t.jsx)(n.a,{href:"../../api/build/artifact",children:(0,t.jsx)(n.code,{children:"artifact"})})," (can be found when inspecting\nproviders, or creating your own actions)."]}),"\n",(0,t.jsxs)(n.p,{children:["A common workflow is to ensure an artifact that you created via some custom\nactions defined in your script, or ensuring some artifacts found in the\nproviders after running analysis. Also see\n",(0,t.jsx)(n.a,{href:"/docs/developers/bxl_faqs#what-do-i-need-to-know-about-ensured-artifacts",children:"What do I need to know about ensured artifacts"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,i.useMDXComponents)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},15680:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>l,MDXProvider:()=>h,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>u});var t=r(96540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(){return s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},s.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),u=function(e){return function(n){var r=d(n.components);return t.createElement(e,s({},n,{components:r}))}},d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},h=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},x=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(r),h=i,p=u["".concat(o,".").concat(h)]||u[h]||f[h]||s;return r?t.createElement(p,a(a({ref:n},l),{},{components:r})):t.createElement(p,a({ref:n},l))}));function y(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=x;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[p]="string"==typeof e?e:i,o[1]=a;for(var l=2;l<s;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}x.displayName="MDXCreateElement"}}]);