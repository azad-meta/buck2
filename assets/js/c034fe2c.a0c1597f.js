"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6061],{60754:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(74848),s=r(15680),a=r(28774);const i={},o="OutputStream",l={id:"api/bxl/OutputStream",title:"OutputStream",description:"The output stream for bxl to print values to the console as their result",source:"@site/../docs/api/bxl/OutputStream.md",sourceDirName:"api/bxl",slug:"/api/bxl/OutputStream",permalink:"/docs/api/bxl/OutputStream",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"LazyResolvedAttrs",permalink:"/docs/api/bxl/LazyResolvedAttrs"},next:{title:"Result",permalink:"/docs/api/bxl/Result"}},u={},c=[{value:"OutputStream.ensure",id:"outputstreamensure",level:2},{value:"OutputStream.ensure_multiple",id:"outputstreamensure_multiple",level:2},{value:"OutputStream.print",id:"outputstreamprint",level:2},{value:"OutputStream.print_json",id:"outputstreamprint_json",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.useMDXComponents)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"outputstream",children:"OutputStream"})}),"\n",(0,n.jsx)(t.p,{children:"The output stream for bxl to print values to the console as their result"}),"\n",(0,n.jsx)(t.h2,{id:"outputstreamensure",children:"OutputStream.ensure"}),"\n",(0,n.jsx)("pre",{class:"language-python",children:(0,n.jsxs)("code",{children:["def OutputStream.ensure(\nartifact: ",(0,n.jsx)(a.default,{to:"/docs/api/build/Artifact",children:"artifact"}),",\n) -> ",(0,n.jsx)(a.default,{to:"/docs/api/bxl/EnsuredArtifact",children:"bxl.EnsuredArtifact"})]})}),"\n",(0,n.jsx)(t.p,{children:"Marks the artifact as an artifact that should be available to the users at the end of the bxl invocation. Any artifacts that do not get registered via this call is not accessible by users at the end of bxl script."}),"\n",(0,n.jsxs)(t.p,{children:["This function returns an ",(0,n.jsx)(t.code,{children:"ensured_artifact"})," type that can be printed via ",(0,n.jsx)(t.code,{children:"ctx.output.print()"}),"\nto print its actual path on disk."]}),"\n",(0,n.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'def _impl_ensure(ctx):\n    actions = ctx.bxl_actions().actions\n    output = actions.write("my_output", "my_content")\n    ensured = ctx.output.ensure(output)\n    ctx.output.print(ensured)\n'})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"outputstreamensure_multiple",children:"OutputStream.ensure_multiple"}),"\n",(0,n.jsx)("pre",{class:"language-python",children:(0,n.jsxs)("code",{children:["def OutputStream.ensure_multiple(\nartifacts: ",(0,n.jsx)(a.default,{to:"/docs/api/build/CellPath",children:"CellPath"})," | None | ",(0,n.jsx)(a.default,{to:"/docs/api/build/Artifact",children:"artifact"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/bxl/BuildResult",children:"bxl.BuildResult"})," | bxl_built_artifacts_iterable | ",(0,n.jsx)(a.default,{to:"/docs/api/build/CellRoot",children:"cell_root"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/build/cmd_args",children:"cmd_args"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/build/Label",children:"label"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/build/OutputArtifact",children:"output_artifact"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/build/ProjectRoot",children:"project_root"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/build/ResolvedStringWithMacros",children:"resolved_macro"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"})," | tagged_command_line | ",(0,n.jsx)(a.default,{to:"/docs/api/build/TargetLabel",children:"target_label"})," | ",(0,n.jsx)(a.default,{to:"/docs/api/build/TransitiveSetArgsProjection",children:"transitive_set_args_projection"})," | write_json_cli_args | list[",(0,n.jsx)(a.default,{to:"/docs/api/build/Artifact",children:"artifact"}),"] | dict[typing.Any, ",(0,n.jsx)(a.default,{to:"/docs/api/bxl/BuildResult",children:"bxl.BuildResult"}),"] | RunInfo,\n)"]})}),"\n",(0,n.jsxs)(t.p,{children:["Same as ",(0,n.jsx)(t.code,{children:"ensure"}),", but for multiple artifacts. Will preserve the shape of the inputs (i.e. if the resulting ",(0,n.jsx)(t.code,{children:"Dict"})," of a ",(0,n.jsx)(t.code,{children:"ctx.build()"})," is passed in, the output will be a ",(0,n.jsx)(t.code,{children:"Dict"})," where the key is preserved, and the values are converted to ",(0,n.jsx)(t.code,{children:"ensured_artifact"}),"s)."]}),"\n",(0,n.jsxs)(t.p,{children:["Note that is slower to loop through objects and ensure them one by one than it is to call ",(0,n.jsx)(t.code,{children:"ensure_multiple()"}),"\non all the objects at once (if possible).\nSo, it is suggested to use this method when you are only ensuring a few individual artifacts that are not stored in an iterable."]}),"\n",(0,n.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"def _impl_ensure_multiple(ctx):\n    outputs = {}\n    for target, value in ctx.build(ctx.cli_args.target).items():\n    outputs.update({target.raw_target(): ctx.output.ensure_multiple(value.artifacts())})\n    ctx.output.print_json(outputs)\n"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"outputstreamprint",children:"OutputStream.print"}),"\n",(0,n.jsx)("pre",{class:"language-python",children:(0,n.jsxs)("code",{children:["def OutputStream.print(\n*args,\nsep: ",(0,n.jsx)(a.default,{to:"/docs/api/starlark/str",children:"str"}),' = " ",\n) -> None']})}),"\n",(0,n.jsx)(t.p,{children:'Outputs results to the console via stdout. These outputs are considered to be the results of a bxl script, which will be displayed to stdout by buck2 even when the script is cached. Accepts an optional separator that defaults to " ".'}),"\n",(0,n.jsxs)(t.p,{children:["Prints that are not result of the bxl should be printed via stderr via the stdlib ",(0,n.jsx)(t.code,{children:"print"}),"\nand ",(0,n.jsx)(t.code,{children:"pprint"}),". Note that ",(0,n.jsx)(t.code,{children:"ctx.output.print()"})," is intended for simple outputs. For more complex\noutputs, the recommendation would be to write them to a file."]}),"\n",(0,n.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'def _impl_print(ctx):\n    ctx.output.print("test")\n'})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"outputstreamprint_json",children:"OutputStream.print_json"}),"\n",(0,n.jsx)("pre",{class:"language-python",children:(0,n.jsxs)("code",{children:["def OutputStream.print_json(\nvalue,\n*,\npretty: ",(0,n.jsx)(a.default,{to:"/docs/api/starlark/bool",children:"bool"})," = True,\n) -> None"]})}),"\n",(0,n.jsxs)(t.p,{children:["Outputs results to the console via stdout as pretty-printed json. Pretty printing can be turned off by the ",(0,n.jsx)(t.code,{children:"pretty"})," keyword-only parameter. These outputs are considered to be the results of a bxl script, which will be displayed to stdout by buck2 even when the script is cached."]}),"\n",(0,n.jsxs)(t.p,{children:["Prints that are not result of the bxl should be printed via stderr via the stdlib ",(0,n.jsx)(t.code,{children:"print"}),"\nand ",(0,n.jsx)(t.code,{children:"pprint"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'def _impl_print_json(ctx):\n    outputs = {}\n    outputs.update({"foo": bar})\n    ctx.output.print_json("test")\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.useMDXComponents)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},15680:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>m,useMDXComponents:()=>d,withMDXComponents:()=>c});var n=r(96540);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var u=n.createContext({}),c=function(e){return function(t){var r=d(t.components);return n.createElement(e,a({},t,{components:r}))}},d=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(u.Provider,{value:t},e.children)},h="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(r),p=s,h=c["".concat(i,".").concat(p)]||c[p]||x[p]||a;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[h]="string"==typeof e?e:s,i[1]=o;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);